<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于Collectors.groupingBy按照某个字段进行分组并排序的问题</title>
      <link href="/2025/01/04/%E5%85%B3%E4%BA%8ECollectors-groupingBy%E6%8C%89%E7%85%A7%E6%9F%90%E4%B8%AA%E5%AD%97%E6%AE%B5%E8%BF%9B%E8%A1%8C%E5%88%86%E7%BB%84%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2025/01/04/%E5%85%B3%E4%BA%8ECollectors-groupingBy%E6%8C%89%E7%85%A7%E6%9F%90%E4%B8%AA%E5%AD%97%E6%AE%B5%E8%BF%9B%E8%A1%8C%E5%88%86%E7%BB%84%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="关于Collectors-groupingBy按照某个字段进行分组并排序的问题"><a href="#关于Collectors-groupingBy按照某个字段进行分组并排序的问题" class="headerlink" title="关于Collectors.groupingBy按照某个字段进行分组并排序的问题"></a>关于Collectors.groupingBy按照某个字段进行分组并排序的问题</h1><p>​最近，在工作中遇到一个问题，是关于Collectors.groupingBy 按照某个字段进行分组并排序的问题。特此记录。</p><p>​众所周知，对一个 List&lt;Map&lt;String, Object&gt;&gt; 类型的集合，如果需要按照元素中的某个字段进行分组，通常使用 lambda 表达式对集合进行流处理。然后使用 Collectors.groupingBy 函数进行分组，此方法源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K&gt; Collector&lt;T, ?, Map&lt;K, List&lt;T&gt;&gt;&gt; groupingBy(Function&lt;? <span class="built_in">super</span> T, ? <span class="keyword">extends</span> <span class="title class_">K</span>&gt; classifier) &#123;</span><br><span class="line">   <span class="keyword">return</span> groupingBy(classifier, toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​该方法需要一个 Function 函数。返回方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T, K, A, D&gt;</span><br><span class="line">    Collector&lt;T, ?, Map&lt;K, D&gt;&gt; groupingBy(Function&lt;? <span class="built_in">super</span> T, ? <span class="keyword">extends</span> <span class="title class_">K</span>&gt; classifier,</span><br><span class="line">                                          Collector&lt;? <span class="built_in">super</span> T, A, D&gt; downstream) &#123;</span><br><span class="line">        <span class="keyword">return</span> groupingBy(classifier, HashMap::<span class="keyword">new</span>, downstream);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​从此方法中看出，除了一个 Function 函数外，还需要一个 默认的 HashMap，但是 HashMap 是一个无序集合，它存储键值对（key-value）但是不保证顺序。也就是说，当你遍历 HashMap 时，元素的顺序可能可插入的顺序无关。这是 HashMap 的特性，不像 LinkedHashMap 或者 TreeMap 那样可以保证顺序。所以，如果要保证按照某个字段进行分组后，还能同时保证排序，groupingBy 方法中需要将 HashMap 改为 LinkedHashMap 或者 TreeMap 即可。</p><h2 id="示例如下："><a href="#示例如下：" class="headerlink" title="示例如下："></a>示例如下：</h2><h3 id="1、使用-HashMap-接收数据时："><a href="#1、使用-HashMap-接收数据时：" class="headerlink" title="1、使用 HashMap 接收数据时："></a>1、使用 HashMap 接收数据时：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = getDate();</span><br><span class="line">        Map&lt;Object, List&lt;Map&lt;String, Object&gt;&gt;&gt; dateMap = list.stream().</span><br><span class="line">                collect(Collectors.groupingBy(e -&gt; e.get(<span class="string">&quot;date&quot;</span>)));</span><br><span class="line">        System.out.println(dateMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getDate</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String, Object&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String, Object&gt; map3 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map1.put(<span class="string">&quot;date&quot;</span>, <span class="string">&quot;20240830&quot;</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;张三1&quot;</span>);</span><br><span class="line">        map2.put(<span class="string">&quot;date&quot;</span>, <span class="string">&quot;20240926&quot;</span>);</span><br><span class="line">        map2.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;张三2&quot;</span>);</span><br><span class="line">        map3.put(<span class="string">&quot;date&quot;</span>, <span class="string">&quot;20241028&quot;</span>);</span><br><span class="line">        map3.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;张三3&quot;</span>);</span><br><span class="line">        list.add(map1);</span><br><span class="line">        list.add(map2);</span><br><span class="line">        list.add(map3);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​执行 main 方法，返回的 dateMap 顺序应该和 list 中的添加顺序一致。打印结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">20240926</span>=[&#123;date=<span class="number">20240926</span>, value=张三<span class="number">2</span>&#125;], <span class="number">20241028</span>=[&#123;date=<span class="number">20241028</span>, value=张三<span class="number">3</span>&#125;], <span class="number">20240830</span>=[&#123;date=<span class="number">20240830</span>, value=张三<span class="number">1</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><p>​结果并非如此。</p><h3 id="2、使用-LinkedHashMap-TreeMap-接收数据"><a href="#2、使用-LinkedHashMap-TreeMap-接收数据" class="headerlink" title="2、使用 LinkedHashMap&#x2F;TreeMap 接收数据"></a>2、使用 LinkedHashMap&#x2F;TreeMap 接收数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> Test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2025/1/4 14:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Created</span> by wangrui</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = getDate();</span><br><span class="line"></span><br><span class="line">        Map&lt;Object, List&lt;Map&lt;String, Object&gt;&gt;&gt; linkedHashMap = list.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(e -&gt; e.get(<span class="string">&quot;date&quot;</span>), LinkedHashMap::<span class="keyword">new</span>, Collectors.toList()));</span><br><span class="line">        Map&lt;Object, List&lt;Map&lt;String, Object&gt;&gt;&gt; treeMap = list.stream()</span><br><span class="line">                .collect(Collectors.groupingBy(e -&gt; e.get(<span class="string">&quot;date&quot;</span>), TreeMap::<span class="keyword">new</span>, Collectors.toList()));</span><br><span class="line">        System.out.println(<span class="string">&quot;linkedHashMap接收数据：&quot;</span> + linkedHashMap);</span><br><span class="line">        System.out.println(<span class="string">&quot;treeMap接收数据：&quot;</span> + treeMap);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getDate</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String, Object&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String, Object&gt; map3 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map1.put(<span class="string">&quot;date&quot;</span>, <span class="string">&quot;20240830&quot;</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;张三1&quot;</span>);</span><br><span class="line">        map2.put(<span class="string">&quot;date&quot;</span>, <span class="string">&quot;20240926&quot;</span>);</span><br><span class="line">        map2.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;张三2&quot;</span>);</span><br><span class="line">        map3.put(<span class="string">&quot;date&quot;</span>, <span class="string">&quot;20241028&quot;</span>);</span><br><span class="line">        map3.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;张三3&quot;</span>);</span><br><span class="line">        list.add(map3);</span><br><span class="line">        list.add(map1);</span><br><span class="line">        list.add(map2);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​执行 main 方法，返回的 dateMap 顺序应该和 list 中的添加顺序一致。打印结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linkedHashMap接收数据：&#123;<span class="number">20241028</span>=[&#123;date=<span class="number">20241028</span>, value=张三<span class="number">3</span>&#125;], <span class="number">20240830</span>=[&#123;date=<span class="number">20240830</span>, value=张三<span class="number">1</span>&#125;], <span class="number">20240926</span>=[&#123;date=<span class="number">20240926</span>, value=张三<span class="number">2</span>&#125;]&#125;</span><br><span class="line">treeMap接收数据：&#123;<span class="number">20240830</span>=[&#123;date=<span class="number">20240830</span>, value=张三<span class="number">1</span>&#125;], <span class="number">20240926</span>=[&#123;date=<span class="number">20240926</span>, value=张三<span class="number">2</span>&#125;], <span class="number">20241028</span>=[&#123;date=<span class="number">20241028</span>, value=张三<span class="number">3</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><p>​此时发现，linkedHashMap 接收数据是按照 list 插入元素的顺序进行排序的，但是 TreeMap 并非如此。这是因为 linkedHashMap 和 TreeMap 两者之间的差别。</p><p>1、LinkedHashMap:</p><ul><li><p>LinkedHashMap 保留了插入元素的顺序。这意味着， list 中的 date 元素（对应Map元素）出现的顺序会决定 LinkedHashMap 的顺序。</p></li><li><p>因此，linkedHashMap 中的键值对是按照 List 中的顺序排列的。</p></li></ul><p>2、TreeMap：</p><ul><li>TreeMap 是一个基于红黑树的有序 Map 实现。它会对键进行自然排序（如果键实现了 Comparable 接口） 或者使用指定的 Comparator 进行排序。</li><li>由于 e.get(“date”) 此时的数据是一个String 类型，String 实现了 Comparable 接口，此时会按照自然顺序进行排序。这就是以上代码中， 使用 TreeMap 进行接收数据时，打印的结果是按照自然排序排列的原因。</li><li>因此，treeMap 中的键值对顺序可能与 list 的顺序不同，但一定是按键值的排序顺序排列的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Stream </category>
          
          <category> 分组排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stream </tag>
            
            <tag> 分组排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot的可扩展接口</title>
      <link href="/2024/12/22/SpringBoot%E7%9A%84%E5%8F%AF%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3/"/>
      <url>/2024/12/22/SpringBoot%E7%9A%84%E5%8F%AF%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot的可扩展接口"><a href="#SpringBoot的可扩展接口" class="headerlink" title="SpringBoot的可扩展接口"></a>SpringBoot的可扩展接口</h1><p>本文转自 <a href="https://cloud.tencent.com/developer/article/2322443%E3%80%82">https://cloud.tencent.com/developer/article/2322443。</a></p><h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><p>​本文主要介绍 Spring 和  SpringBoot 在启动过程中涉及到的可扩展接口，以及各个扩展点的使用场景。并整理出一个 bean 在 Spring  内部从被加载到到最后初始化完成所有可扩展点的顺序调用图。</p><h1 id="二、可扩展接口启动调用顺序图"><a href="#二、可扩展接口启动调用顺序图" class="headerlink" title="二、可扩展接口启动调用顺序图"></a>二、可扩展接口启动调用顺序图</h1><img src="/2024/12/22/SpringBoot%E7%9A%84%E5%8F%AF%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3/%E6%97%B6%E5%BA%8F%E5%9B%BE.png" class="" title="时序图"><!-- <img src="/2024/12/22/SpringBoot%E7%9A%84%E5%8F%AF%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3/%E6%97%B6%E5%BA%8F%E5%9B%BE.png" class="" title="图片飞去火星啦"> --><h1 id="三、ApplicationContextInitializer"><a href="#三、ApplicationContextInitializer" class="headerlink" title="三、ApplicationContextInitializer"></a>三、ApplicationContextInitializer</h1><p>​该接口在 org.springframework.context 包下，这是整个 Spring 容器在刷新之前初始化 ConfigurableApplicationContext 的回调接口，简单来说就是在容器刷新之前调用此类的 initialize 方法。这个点允许用户自己扩展。用户可以在整个 Spring 容器还没有被初始化之前做一些事情。适用的场景：在开始激活一些配置，或者利用这个时候 class 还没有被类加载器加载的时机，进行动态字节码注入等操作。扩展方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextInitializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextInitializerTest</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextInitializer</span>&lt;ConfigurableApplicationContext&gt;&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">active</span> <span class="operator">=</span> applicationContext.isActive();</span><br><span class="line">        System.out.println(<span class="string">&quot;active=&quot;</span> + active);</span><br><span class="line">        System.out.println(<span class="string">&quot;ApplicationContextInitializerTest的initialize方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​因为此时容器还没有被初始化，想要扩展生效，有以下的几种方式：</p><p>​1、在启动类中将 ApplicationContextInitializerTest 对象添加到 SpringApplication 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SpringApplication</span> <span class="variable">springApplication</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(DemoApplication.class);</span><br><span class="line">        springApplication.addInitializers(<span class="keyword">new</span> <span class="title class_">ApplicationContextInitializerTest</span>());</span><br><span class="line">        springApplication.run(args);</span><br><span class="line"><span class="comment">//        SpringApplication.run(DemoApplication.class, args);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​2、在配置文件中进行配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">context.initializer.classes</span>=<span class="string">com.example.demo.ApplicationContextInitializerTest</span></span><br></pre></td></tr></table></figure><p>​3、利用Spring SPI扩展，在spring.factories中加入如下信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">com.example.demo.ApplicationContextInitializerTest</span></span><br></pre></td></tr></table></figure><p>​启动后打印如下信息:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/Library/Java/JavaVirtualMachines/jdk-<span class="number">17.</span>jdk/Contents/Home/bin/java ......</span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="string">( ( )\___ | &#x27;</span>_ | <span class="string">&#x27;_| | &#x27;</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">&#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="string"> =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::                (v2.7.7)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">active=false</span></span><br><span class="line"><span class="string">ApplicationContextInitializerTest的initialize方法执行</span></span><br><span class="line"><span class="string">2024-12-17 17:21:13.605  INFO 45505 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication using Java 17.0.11</span></span><br><span class="line"><span class="string">2024-12-17 17:21:13.605 DEBUG 45505 --- [           main] com.example.demo.DemoApplication         : Running with Spring Boot v2.7.7, Spring v5.3.24</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">2024-12-17 17:21:13.973  INFO 45505 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 0.482 seconds (JVM running for 0.643)</span></span><br></pre></td></tr></table></figure><h1 id="四、BeanDefinitionRegistryPostProcessor"><a href="#四、BeanDefinitionRegistryPostProcessor" class="headerlink" title="四、BeanDefinitionRegistryPostProcessor"></a>四、BeanDefinitionRegistryPostProcessor</h1><p>​该接口在 org.springframework.beans.factory.support 包下，这个接口在读取项目中的 beanDefinition 之后执行，提供一个补充的扩展点。适用的场景：你可以在这里动态注册自己的 beanDefinition，可以加载 classpath之外的 bean。扩展方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanDefinitionRegistryPostProcessorTest</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BeanDefinitionRegistryPostProcessorTest的注册方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BeanDefinitionRegistryPostProcessorTest的postProcessBeanFactory方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​项目启动后打印日志如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/Library/Java/JavaVirtualMachines/jdk-<span class="number">17.</span>jdk/Contents/Home/bin/java ...</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="string">( ( )\___ | &#x27;</span>_ | <span class="string">&#x27;_| | &#x27;</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">&#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="string"> =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::                (v2.7.7)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">active=false</span></span><br><span class="line"><span class="string">ApplicationContextInitializerTest的initialize方法执行</span></span><br><span class="line"><span class="string">2024-12-17 17:28:52.003  INFO 45585 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication using Java 17.0.11</span></span><br><span class="line"><span class="string">2024-12-17 17:28:52.004 DEBUG 45585 --- [           main] com.example.demo.DemoApplication         : Running with Spring Boot v2.7.7, Spring v5.3.24</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">BeanDefinitionRegistryPostProcessorTest的注册方法执行</span></span><br><span class="line"><span class="string">BeanDefinitionRegistryPostProcessorTest的postProcessBeanFactory方法执行</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">2024-12-17 17:28:52.385  INFO 45585 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 0.492 seconds (JVM running for 0.66)</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h1 id="五、BeanFactoryPostProcessor"><a href="#五、BeanFactoryPostProcessor" class="headerlink" title="五、BeanFactoryPostProcessor"></a>五、BeanFactoryPostProcessor</h1><p>​该接口在 org.springframework.beans.factory.config 包下，这个接口是 beanFactory 的扩展接口，调用时机在 Spring 读取 bean Definition 信息之后，实例化 bean 之前。在这个时机，用户可以通过实现这个扩展接口来自行处理一些东西，比如修改已经注册的 beanDefinition 的元信息。扩展方式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanFactoryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanFactoryPostProcessorTest</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BeanFactoryPostProcessorTest的postProcessBeanFactory方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​项目启动后打印日志如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/Library/Java/JavaVirtualMachines/jdk-<span class="number">17.</span>jdk/Contents/Home/bin/java</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="string">( ( )\___ | &#x27;</span>_ | <span class="string">&#x27;_| | &#x27;</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">&#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="string"> =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::                (v2.7.7)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">active=false</span></span><br><span class="line"><span class="string">ApplicationContextInitializerTest的initialize方法执行</span></span><br><span class="line"><span class="string">2024-12-17 17:54:01.036  INFO 45814 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication using Java 17.0.11</span></span><br><span class="line"><span class="string">2024-12-17 17:54:01.036 DEBUG 45814 --- [           main] com.example.demo.DemoApplication         : Running with Spring Boot v2.7.7, Spring v5.3.24</span></span><br><span class="line"><span class="string">2024-12-17 17:54:01.037  INFO 45814 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: &quot;default&quot;</span></span><br><span class="line"><span class="string">BeanDefinitionRegistryPostProcessorTest的注册方法执行</span></span><br><span class="line"><span class="string">BeanDefinitionRegistryPostProcessorTest的postProcessBeanFactory方法执行</span></span><br><span class="line"><span class="string">BeanFactoryPostProcessorTest的postProcessBeanFactory方法执行</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">2024-12-17 17:54:01.408  INFO 45814 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 0.483 seconds (JVM running for 0.664)</span></span><br></pre></td></tr></table></figure><h1 id="六、InstantiationAwareBeanPostProcessor"><a href="#六、InstantiationAwareBeanPostProcessor" class="headerlink" title="六、InstantiationAwareBeanPostProcessor"></a>六、InstantiationAwareBeanPostProcessor</h1><p>​该接口在 org.springframework.beans.factory.config 包下，接口继承了 BeanPostProcess 接口，区别如下：</p><p>BeanPostProcess 接口只在 bean 的初始化阶段进行扩展（注入 Spring 上下文前后），而 InstantiationAwareBeanPostProcessor 接口在此基础上新增了三个方法（注意：本文的 Spring 版本为 v5.3.24），把可扩展的范围增加了实例化阶段和属性注入阶段。</p><ul><li><strong>postProcessBeforeInstantiation</strong>：实例化bean之前，相当于new这个bean之前。</li><li><strong>postProcessAfterInstantiation</strong>：实例化bean之后，相当于new这个bean之后，属性填充之前被调用。</li><li><strong>postProcessProperties</strong>：在属性填充阶段（即依赖注入）进行额外处理，例如：动态修改或计算属性值，条件性地注入属性值，为某些属性添加自定义逻辑。</li><li>**<del>postProcessPropertyValues</del>**（弃用）：bean已经实例化完成，在属性填充阶段触发，<code>@Autowired</code>,<code>@Resource</code>等注解原理基于此方法实现。</li><li><strong>postProcessBeforeInitialization</strong>：初始化bean之前，相当于把bean注入spring上下文之前。</li><li><strong>postProcessAfterInitialization</strong>：初始化bean之后，相当于把bean注入spring上下文之后。</li></ul><p>​适用场景：写中间件或者业务中，都能利用这个特性。比如对实现了某一类接口的 bean 在各个生命期间进行收集，或者对某个类型的 bean 进行统一的赋值等等。扩展方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.PropertyValues;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstantiationAwareBeanPostProcessorTest</span> <span class="keyword">implements</span> <span class="title class_">InstantiationAwareBeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InstantiationAwareBeanPostProcessorTest的postProcessBeforeInitialization方法被执行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InstantiationAwareBeanPostProcessorTest的postProcessAfterInitialization方法被执行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InstantiationAwareBeanPostProcessorTest的postProcessBeforeInstantiation方法被执行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InstantiationAwareBeanPostProcessorTest的postProcessAfterInstantiation方法被执行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PropertyValues <span class="title function_">postProcessProperties</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InstantiationAwareBeanPostProcessorTest的postProcessProperties方法被执行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> pvs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七、SmartInstantiationAwareBeanPostProcessor"><a href="#七、SmartInstantiationAwareBeanPostProcessor" class="headerlink" title="七、SmartInstantiationAwareBeanPostProcessor"></a>七、SmartInstantiationAwareBeanPostProcessor</h1><p>​该接口在org.springframework.beans.factory.config 包下，此接口有三个触发方法：</p><ul><li><p><strong>predictBeanType</strong>：该触发点发生在 postProcessBeforeInstantiation 之前(在图上并没有标明，因为一般不太需要扩展这个点)，这个方法用于预测 bean 的类型，返回第一个预测成功的 Class 类型，如果不能预测返回 null，当调用 BeanFactory.getType(name) 时通过 bean 的名字无法得到 bean 的类型信息时就调用该回调方法来决定类型信息。</p></li><li><p><strong>determineCandidateConstructors</strong>：该触发点在 postProcessBeforeInstantiation 之后，用于确定该 bean 的构造函数，返回的是该 bean 的所有构造函数列表。用户可以扩展这个点，用来自定义选择相应的构造器来实例化这个 bean。</p></li><li><p><strong>getEarlyBeanReference</strong>：该触发点发生在 postProcessBeforeInstantiation 之后，当有循环依赖场景时，当 bean 实例化好之后，为防止循环依赖，会提前暴露回调方法，用于 bean 实例化的后置处理。这个方法就是在提前暴露的回调方法中触发。</p><p>扩展方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartInstantiationAwareBeanPostProcessorTest</span> <span class="keyword">implements</span> <span class="title class_">SmartInstantiationAwareBeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; predictBeanType(Class&lt;?&gt; beanClass, String beanName) <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;predictBeanType方法执行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> beanClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Constructor&lt;?&gt;[] determineCandidateConstructors(Class&lt;?&gt; beanClass, String beanName) <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;determineCandidateConstructors方法执行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getEarlyBeanReference</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getEarlyBeanReference方法执行&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="八、BeanFactoryAware"><a href="#八、BeanFactoryAware" class="headerlink" title="八、BeanFactoryAware"></a>八、BeanFactoryAware</h1><p>​该接口位于 org.springframework.beans.factory 包下，这个接口只有一个触发点，发生在 bean 实例化之后，注入属性之前，也就是 set 之前。这个接口的扩展点方法为 setBeanFactory，可以拿到 BeanFactory 这个属性。</p><p>​使用场景：可以在 bean 实例化之后，初始化之前，拿到 BeanFactory，在这个时候，可以对 bean 做特殊化的定制，也可以缓存 BeanFactory，后续拿来使用。扩展方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactoryAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanFactoryAwareTest</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;beanFactory=&quot;</span> + beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="九、ApplicationContextAwareProcessor"><a href="#九、ApplicationContextAwareProcessor" class="headerlink" title="九、ApplicationContextAwareProcessor"></a>九、ApplicationContextAwareProcessor</h1><p>​该类位于 org.springframework.context.support 包下，这个类内部有七个扩展可供实现（本文的 Spring 版本为v5.3.24），这个类触发的时机发生在 bean 实例化之后，初始化之前。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">invokeAwareInterfaces</span><span class="params">(Object bean)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> EnvironmentAware) &#123;</span><br><span class="line">((EnvironmentAware) bean).setEnvironment(<span class="built_in">this</span>.applicationContext.getEnvironment());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> EmbeddedValueResolverAware) &#123;</span><br><span class="line">((EmbeddedValueResolverAware) bean).setEmbeddedValueResolver(<span class="built_in">this</span>.embeddedValueResolver);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ResourceLoaderAware) &#123;</span><br><span class="line">((ResourceLoaderAware) bean).setResourceLoader(<span class="built_in">this</span>.applicationContext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationEventPublisherAware) &#123;</span><br><span class="line">((ApplicationEventPublisherAware) bean).setApplicationEventPublisher(<span class="built_in">this</span>.applicationContext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> MessageSourceAware) &#123;</span><br><span class="line">((MessageSourceAware) bean).setMessageSource(<span class="built_in">this</span>.applicationContext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationStartupAware) &#123;</span><br><span class="line">((ApplicationStartupAware) bean).setApplicationStartup(<span class="built_in">this</span>.applicationContext.getApplicationStartup());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationContextAware) &#123;</span><br><span class="line">((ApplicationContextAware) bean).setApplicationContext(<span class="built_in">this</span>.applicationContext);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​可以看到，该类用于执行各种驱动接口，在 bean 实例化之后，属性填充之后，通过执行上述 instanceof 后面标出的扩展接口，来获取对应容器的变量。</p><ul><li><strong>EnvironmentAware</strong>：用于获取 EnvironmentAware 的一个扩展类，可以获取系统内部的所有参数。</li><li><strong>EmbeddedValueResolverAware</strong>：用于获取 StringValueResolver 的一个扩展类（EmbeddedValueResolverAware 接口中 setEmbeddedValueResolver 有一个 StringValueResolver 参数），StringValueResolver 用于获取基于 String 类型的 properties 的变量，一般我们用 @Value 注解的方式获取，如果实现了这个 Aware 接口，把 StringValueResolver 缓存起来，通过这个类去获取 String 类型的变量，效果是一样的。</li><li><strong>ResourceLoaderAware</strong>：用于获取 ResourceLoader 的一个扩展类（同上），ResourceLoader 可以用于获取 classpath 内所有的资源对象，可以扩展此类来拿到  ResourceLoader 对象。</li><li><strong>ApplicationEventPublisherAware</strong>：用于获取 ApplicationEventPublisher 的一个扩展类，ApplicationEventPublisher 可以用来发布事件，结合 ApplicationListener 来共同使用，下文在介绍 ApplicationListener 时会详细提到。这个对象也可以通过 spring 注入的方式来获得。</li><li><strong>MessageSourceAware</strong>：用于获取 MessageSource 的一个扩展类， MessageSource 主要用来做国际化。</li><li><strong>ApplicationStartupAware</strong>：用于获取 ApplicationStartup 的一个扩展类，主要提供一种方式用来追踪 Spring Boot 应用程序启动各个过程中的各个阶段，它允许你在应用程序启动时执行自定义的操作，比如记录启动的时间、日志、性能分析、监控等，帮助开发者分析启动性能。</li><li><strong>ApplicationContextAware</strong>：用来获取 ApplicationContext 的一个扩展类，ApplicationContext 就是spring上下文管理器，可以手动的获取任何在 spring 上下文注册的 bean，我们经常扩展这个接口来缓存 spring 上下文，包装成静态方法。同时ApplicationContext 也实现了 BeanFactory，MessageSource，ApplicationEventPublisher 等接口，也可以用来做相关接口的事情。</li></ul><h1 id="十、BeanNameAware"><a href="#十、BeanNameAware" class="headerlink" title="十、BeanNameAware"></a>十、BeanNameAware</h1><p>​这个接口位于 org.springframework.beans.factory 包下，该接口也是 Aware 扩展的一种，触发点在 bean 初始化之前，也就是 postProcessBeforeInitialization 之前，这个接口的触发方法只有一个：setBeanName。</p><p>​使用场景：用户可以扩展这个点，在初始化 bean 之前拿到 Spring 容器中注册的 beanName，来自行修改这个 beanName 的值。</p><p>扩展方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanNameAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanNameAwareTest</span> <span class="keyword">implements</span> <span class="title class_">BeanNameAware</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​启动项目后，打印日志如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/Library/Java/JavaVirtualMachines/jdk-<span class="number">17.</span>jdk/Contents/Home/bin/java</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="string">( ( )\___ | &#x27;</span>_ | <span class="string">&#x27;_| | &#x27;</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">&#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="string"> =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::                (v2.7.7)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">active=false</span></span><br><span class="line"><span class="string">ApplicationContextInitializerTest的initialize方法执行</span></span><br><span class="line"><span class="string">2024-12-18 14:17:47.217  INFO 49803 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication using Java 17.0.11</span></span><br><span class="line"><span class="string">2024-12-18 14:17:47.218 DEBUG 49803 --- [           main] com.example.demo.DemoApplication         : Running with Spring Boot v2.7.7, Spring v5.3.24</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">name=beanNameAwareTest</span></span><br><span class="line"><span class="string">2024-12-18 14:17:47.589  INFO 49803 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">2024-12-18 14:17:47.592  INFO 49803 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 0.493 seconds (JVM running for 0.657)</span></span><br></pre></td></tr></table></figure><h1 id="十一、-PostConstruct"><a href="#十一、-PostConstruct" class="headerlink" title="十一、@PostConstruct"></a>十一、@PostConstruct</h1><p>​这个注解，在包 javax.annotation 下，其作用是在 bean 的初始化阶段，如果一个方法标注了 @PostConstruct 注解，会先调用这个方法。这里重点是要关注这个标准的触发点，这个触发点是在 postProcessBeforeInitialization 之后，InitializingBean.afterPropertiesSet 之前。</p><p>​使用场景：用户可以对某一方法进行标注，来进行初始化某一个属性。扩展方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​项目启动后打印日志如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/Library/Java/JavaVirtualMachines/jdk-<span class="number">17.</span>jdk/Contents/Home/bin/java</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="string">( ( )\___ | &#x27;</span>_ | <span class="string">&#x27;_| | &#x27;</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">&#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="string"> =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::                (v2.7.7)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">active=false</span></span><br><span class="line"><span class="string">ApplicationContextInitializerTest的initialize方法执行</span></span><br><span class="line"><span class="string">2024-12-18 14:28:39.014  INFO 49906 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication using Java 17.0.11</span></span><br><span class="line"><span class="string">2024-12-18 14:28:39.015 DEBUG 49906 --- [           main] com.example.demo.DemoApplication         : Running with Spring Boot v2.7.7, Spring v5.3.24</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">test</span></span><br><span class="line"><span class="string">init</span></span><br><span class="line"><span class="string">2024-12-18 14:28:39.381  INFO 49906 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">2024-12-18 14:28:39.385  INFO 49906 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 0.481 seconds (JVM running for 0.65)</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>​init() 方法会在 Test 这个 bean 实例化并且依赖注入完成后执行，打印 init 日志。</p><h1 id="十二、InitializingBean"><a href="#十二、InitializingBean" class="headerlink" title="十二、InitializingBean"></a>十二、InitializingBean</h1><p>​该接口位于 org.springframework.beans.factory 包下，这个接口是用来初始化 bean 的。InitializingBean 为 bean 提供了初始化方法的方式：afterPropertiesSet 方法。凡是继承该接口的类，在初始化 bean 的时候都会执行该方法。这个扩展点触发的时机在 postProcessAfterInitialization 之前。</p><p>​使用场景：用户实现此接口，来进行系统启动的时候一些业务指标的初始化工作。扩展方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterPropertiesSet方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十三、FactoryBean"><a href="#十三、FactoryBean" class="headerlink" title="十三、FactoryBean"></a>十三、FactoryBean</h1><p>​该接口位于 org.springframework.beans.factory 包下。一般情况下，Spring 通过反射机制利用 bean 的 class 属性指定支线类去实例化bean，在某些情况下，实例化 bean 过程比较复杂，如果按照传统的方式，则需要在 bean 中提供大量的配置信息。配置方式的灵活性是受限的，这时采用编码的方式可能会得到一个简单的方案。Spring为此提供了一个 FactoryBean 的工厂类接口，用户可以通过实现该接口定制实例化 Bean 的逻辑。FactoryBean 接口对于 Spring 框架来说占用重要的地位，Spring 自身就提供了70多个 FactoryBean 的实现。它们隐藏了实例化一些复杂 bean 的细节，给上层应用带来了便利。从Spring3.0开始，FactoryBean 开始支持泛型，即接口声明改为 FactoryBean<T> 的形式</p><p>​使用场景：用户可以扩展这个类，来为要实例化的 bean 做一个代理，比如为该对象的所有的方法作一个拦截，在调用前后输出一行log，模仿 ProxyFactoryBean 的功能。扩展方式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryBeanTest</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;FactoryBeanTest.A&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FactoryBeanTest.A <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FactoryBeanTest.getObject&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FactoryBeanTest</span>.A();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> FactoryBeanTest.A.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="十四、SmartInitializingSingleton"><a href="#十四、SmartInitializingSingleton" class="headerlink" title="十四、SmartInitializingSingleton"></a>十四、SmartInitializingSingleton</h1><p>​该接口位于 org.springframework.beans.factory 包下。这个接口中只有一个方法  afterSingletonsInstantiated，其作用是 在spring 容器管理的所有单例对象（非懒加载对象）初始化完成之后调用的回调接口。其触发时机为 postProcessAfterInitialization 之后。</p><p>​使用场景：用户可以扩展此接口在对所有单例对象初始化完毕后，做一些后置的业务处理。扩展方式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.SmartInitializingSingleton;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartInitializingSingletonTest</span> <span class="keyword">implements</span> <span class="title class_">SmartInitializingSingleton</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterSingletonsInstantiated</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterSingletonsInstantiated方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​启动项目，打印日志如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/Library/Java/JavaVirtualMachines/jdk-<span class="number">17.</span>jdk/Contents/Home/bin/java</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="string">( ( )\___ | &#x27;</span>_ | <span class="string">&#x27;_| | &#x27;</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">&#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="string"> =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::                (v2.7.7)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">active=false</span></span><br><span class="line"><span class="string">ApplicationContextInitializerTest的initialize方法执行</span></span><br><span class="line"><span class="string">2024-12-22 11:34:21.014  INFO 66111 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication using Java 17.0.11 </span></span><br><span class="line"><span class="string">2024-12-22 11:34:21.015 DEBUG 66111 --- [           main] com.example.demo.DemoApplication         : Running with Spring Boot v2.7.7, Spring v5.3.24</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">afterSingletonsInstantiated方法执行</span></span><br><span class="line"><span class="string">2024-12-22 11:34:21.368  INFO 66111 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">2024-12-22 11:34:21.371  INFO 66111 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 0.464 seconds (JVM running for 0.629)</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h1 id="十五、CommandLineRunner"><a href="#十五、CommandLineRunner" class="headerlink" title="十五、CommandLineRunner"></a>十五、CommandLineRunner</h1><p>​位于 org.springframework.boot 包下，该接口只有一个方法 run(String… args) ，触发时机为整个项目启动完成后，自动执行，如果有多个 CommandLineRunner ，可以利用 @order 来进行排序。</p><p>​使用场景：用户扩展此接口，进行启动项目之后一些业务的预处理。扩展方式如下：</p><p>​第一个实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandLineRunnerTest1</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CommandLineRunnerTest1执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​第二个实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandLineRunnerTest2</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CommandLineRunnerTest2执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code> 项目启动完成后，打印日志如下：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/Library/Java/JavaVirtualMachines/jdk-<span class="number">17.</span>jdk/Contents/Home/bin/java</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="string">( ( )\___ | &#x27;</span>_ | <span class="string">&#x27;_| | &#x27;</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">&#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="string"> =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::                (v2.7.7)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">active=false</span></span><br><span class="line"><span class="string">ApplicationContextInitializerTest的initialize方法执行</span></span><br><span class="line"><span class="string">2024-12-22 11:39:35.683  INFO 66170 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication using Java 17.0.11</span></span><br><span class="line"><span class="string">2024-12-22 11:39:35.684 DEBUG 66170 --- [           main] com.example.demo.DemoApplication         : Running with Spring Boot v2.7.7, Spring v5.3.24</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">2024-12-22 11:39:36.062  INFO 66170 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">2024-12-22 11:39:36.066  INFO 66170 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 0.494 seconds (JVM running for 0.659)</span></span><br><span class="line"><span class="string">CommandLineRunnerTest1执行</span></span><br><span class="line"><span class="string">CommandLineRunnerTest2执行</span></span><br></pre></td></tr></table></figure><p>​<strong>注意： @Order 注解中的值越小，优先级越高。</strong></p><h1 id="十六、DisposableBean"><a href="#十六、DisposableBean" class="headerlink" title="十六、DisposableBean"></a>十六、DisposableBean</h1><p>​位于 org.springframework.beans.factory 包下，这个扩展点也只有一个方法：destroy()，其触发时机为当此对象销毁时，会自动执行这个方法。比如说运行 applicationContext.registerShutdownHook 时，就会触发这个方法。扩展方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDestory</span> <span class="keyword">implements</span> <span class="title class_">DisposableBean</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestDestory 的 destroy 方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​新增一个接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/hello&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TestDestory</span> <span class="variable">testDestory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestDestory</span>();</span><br><span class="line">        testDestory.destroy();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​启动项目后，调用 <a href="http://localhost:8080/hello">http://localhost:8080/hello</a> 接口，打印日志如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/Library/Java/JavaVirtualMachines/jdk-<span class="number">17.</span>jdk/Contents/Home/bin/java</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="string">( ( )\___ | &#x27;</span>_ | <span class="string">&#x27;_| | &#x27;</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">&#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="string"> =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::                (v2.7.7)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">active=false</span></span><br><span class="line"><span class="string">ApplicationContextInitializerTest的initialize方法执行</span></span><br><span class="line"><span class="string">2024-12-22 11:49:56.968  INFO 66316 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication using Java 17.0.11</span></span><br><span class="line"><span class="string">2024-12-22 11:49:56.969 DEBUG 66316 --- [           main] com.example.demo.DemoApplication         : Running with Spring Boot v2.7.7, Spring v5.3.24</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">2024-12-22 11:49:57.347  INFO 66316 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 0.486 seconds (JVM running for 0.65)</span></span><br><span class="line"><span class="string">CommandLineRunnerTest2执行</span></span><br><span class="line"><span class="string">CommandLineRunnerTest1执行</span></span><br><span class="line"><span class="string">2024-12-22 11:50:03.198  INFO 66316 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#x27;</span>dispatcherServlet<span class="string">&#x27;</span></span><br><span class="line"><span class="string">2024-12-22 11:50:03.198  INFO 66316 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#x27;</span>dispatcherServlet<span class="string">&#x27;</span></span><br><span class="line"><span class="string">2024-12-22 11:50:03.199  INFO 66316 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms</span></span><br><span class="line"><span class="string">TestDestory 的 destroy 方法执行</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门教程</title>
      <link href="/2024/12/11/Docker%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2024/12/11/Docker%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker入门教程"><a href="#Docker入门教程" class="headerlink" title="Docker入门教程"></a>Docker入门教程</h1><h1 id="一、Docker-用途"><a href="#一、Docker-用途" class="headerlink" title="一、Docker 用途"></a>一、Docker 用途</h1><p>Docker 的主要用途，目前有三大类。</p><p><strong>（1）提供一次性的环境。</strong>比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</p><p><strong>（2）提供弹性的云服务。</strong>因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</p><p><strong>（3）组建微服务架构。</strong>通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</p><h1 id="二、Docker-安装"><a href="#二、Docker-安装" class="headerlink" title="二、Docker 安装"></a>二、Docker 安装</h1><p>​Docker 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。企业版包含了一些收费服务，个人开发者一般用不到。下面的介绍都针对社区版。</p><p><a href="https://docs.docker.com/desktop/install/windows-install/">Windows安装</a></p><p><a href="https://docs.docker.com/engine/install/centos/">CentOs安装</a></p><p>​安装完成后，运行下面的命令，验证是否安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker version</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker info</span></span><br></pre></td></tr></table></figure><p>​Docker 需要用户具有 sudo 权限，为了避免每次命令都输入<code>sudo</code>，可以把用户加入 Docker 用户组（<a href="https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user">官方文档</a>）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo usermod -aG docker <span class="variable">$USER</span></span></span><br></pre></td></tr></table></figure><p>​Docker 是服务器—-客户端架构。命令行运行<code>docker</code>命令的时候，需要本机有 Docker 服务。如果这项服务没有启动，可以用下面的命令启动（<a href="https://docs.docker.com/config/daemon/systemd/">官方文档</a>）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">service 命令的用法</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo service docker start</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl 命令的用法</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo systemctl start docker</span></span><br></pre></td></tr></table></figure><h1 id="三、image文件"><a href="#三、image文件" class="headerlink" title="三、image文件"></a>三、image文件</h1><p>​Docker 把应用程序以及所需的依赖打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p><p>​image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出本机的所有 image 文件。</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">ls</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除 image 文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">rm</span> [imageName]</span></span><br></pre></td></tr></table></figure><p>​image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。</p><p>​为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库 <a href="https://hub.docker.com/">Docker Hub</a> 是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。</p><h1 id="四、实例：Hello-World"><a href="#四、实例：Hello-World" class="headerlink" title="四、实例：Hello World"></a>四、实例：Hello World</h1><p>​下面，我们通过最简单的 image 文件”<a href="https://hub.docker.com/r/library/hello-world/">hello world”</a>，感受一下 Docker。</p><p>​需要说明的是，国内连接 Docker 的官方仓库很慢，还会断线，需要将默认仓库改成国内的镜像网站，具体的修改方法在<a href="https://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html">下一篇文章</a>的第一节。有需要的朋友，可以先看一下。</p><p>首先，运行下面的命令，将 image 文件从仓库抓取到本地。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image pull library/hello-world</span></span><br></pre></td></tr></table></figure><p>​上面代码中，<code>docker image pull</code>是抓取 image 文件的命令。<code>library/hello-world</code>是 image 文件在仓库里面的位置，其中<code>library</code>是 image 文件所在的组，<code>hello-world</code>是 image 文件的名字。</p><p>由于 Docker 官方提供的 image 文件，都放在<a href="https://hub.docker.com/r/library/"><code>library</code></a>组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image pull hello-world</span></span><br></pre></td></tr></table></figure><p>​抓取成功以后，就可以在本机看到这个 image 文件了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">ls</span></span></span><br></pre></td></tr></table></figure><p>​现在，运行这个 image 文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container run hello-world</span></span><br></pre></td></tr></table></figure><p><code>docker container run</code>命令会从 image 文件，生成一个正在运行的容器实例。</p><p>​注意，<code>docker container run</code>命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的<code>docker image pull</code>命令并不是必需的步骤。</p><p>如果运行成功，你会在屏幕上读到下面的输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container run hello-world</span></span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><p>输出这段提示以后，<code>hello world</code>就会停止运行，容器自动终止。</p><p>有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container run -it ubuntu bash</span></span><br></pre></td></tr></table></figure><p>对于那些不会自动终止的容器，必须使用<a href="https://docs.docker.com/engine/reference/commandline/container_kill/"><code>docker container kill</code></a> 命令手动终止。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">kill</span> [containID]</span></span><br></pre></td></tr></table></figure><h1 id="五、容器文件"><a href="#五、容器文件" class="headerlink" title="五、容器文件"></a>五、容器文件</h1><p>​<strong>image 文件生成的容器实例，本身也是一个文件，称为容器文件。</strong>也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出本机正在运行的容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">ls</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出本机所有容器，包括终止运行的容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">ls</span> --all</span></span><br></pre></td></tr></table></figure><p>​上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的<code>docker container kill</code>命令。</p><p>终止运行的容器文件，依然会占据硬盘空间，可以使用<a href="https://docs.docker.com/engine/reference/commandline/container_rm/"><code>docker container rm</code></a>命令删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">rm</span> [containerID]</span></span><br></pre></td></tr></table></figure><p>运行上面的命令之后，再使用<code>docker container ls --all</code>命令，就会发现被删除的容器文件已经消失了。</p><h1 id="六、Dockerfile-文件"><a href="#六、Dockerfile-文件" class="headerlink" title="六、Dockerfile 文件"></a>六、Dockerfile 文件</h1><p>​学会使用 image 文件以后，接下来的问题就是，如何可以生成 image 文件？如果你要推广自己的软件，势必要自己制作 image 文件。</p><p>这就需要用到 Dockerfile 文件。它是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。</p><p>下面通过一个实例，演示如何编写 Dockerfile 文件。</p><h1 id="七、实例：制作自己的-Docker-容器"><a href="#七、实例：制作自己的-Docker-容器" class="headerlink" title="七、实例：制作自己的 Docker 容器"></a>七、实例：制作自己的 Docker 容器</h1><p>​下面我以 <a href="https://www.ruanyifeng.com/blog/2017/08/koa.html">koa-demos</a> 项目为例，介绍怎么写 Dockerfile 文件，实现让用户在 Docker 容器里面运行 Koa 框架。</p><p>作为准备工作，请先<a href="https://github.com/ruanyf/koa-demos/archive/master.zip">下载源码</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/ruanyf/koa-demos.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> koa-demos</span></span><br></pre></td></tr></table></figure><p>​首先，在项目的根目录下，新建一个文本文件<code>.dockerignore</code>，写入下面的<a href="https://github.com/ruanyf/koa-demos/blob/master/.dockerignore">内容</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.git</span><br><span class="line">node_modules</span><br><span class="line">npm-debug.log</span><br></pre></td></tr></table></figure><p>​上面代码表示，这三个路径要排除，不要打包进入 image 文件。如果你没有路径要排除，这个文件可以不新建。</p><p>然后，在项目的根目录下，新建一个文本文件 Dockerfile，写入下面的<a href="https://github.com/ruanyf/koa-demos/blob/master/Dockerfile">内容</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM node:8.4</span><br><span class="line">COPY . /app</span><br><span class="line">WORKDIR /app</span><br><span class="line">RUN npm install --registry=https://registry.npm.taobao.org</span><br><span class="line">EXPOSE 3000</span><br></pre></td></tr></table></figure><p>​上面代码一共五行，含义如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM node:8.4：该 image 文件继承官方的 node image，冒号表示标签，这里标签是8.4，即8.4版本的 node。</span><br><span class="line">COPY . /app：将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录。</span><br><span class="line">WORKDIR /app：指定接下来的工作路径为/app。</span><br><span class="line">RUN npm install：在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。</span><br><span class="line">EXPOSE 3000：将容器 3000 端口暴露出来， 允许外部连接这个端口。</span><br></pre></td></tr></table></figure><p>​有了 Dockerfile 文件以后，就可以使用<code>docker image build</code>命令创建 image 文件了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image build -t koa-demo .</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image build -t koa-demo:0.0.1 .</span></span><br></pre></td></tr></table></figure><p>​上面代码中，<code>-t</code>参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是<code>latest</code>。最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点。</p><p>如果运行成功，就可以看到新生成的 image 文件<code>koa-demo</code>了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">ls</span></span></span><br></pre></td></tr></table></figure><p>​生成容器</p><p><code>docker container run</code>命令会从 image 文件生成容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container run -p 8000:3000 -it koa-demo /bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container run -p 8000:3000 -it koa-demo:0.0.1 /bin/bash</span></span><br></pre></td></tr></table></figure><p>​上面命令的各个参数含义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-p参数：容器的 3000 端口映射到本机的 8000 端口。</span><br><span class="line">-it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。</span><br><span class="line">koa-demo:0.0.1：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。</span><br><span class="line">/bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。</span><br></pre></td></tr></table></figure><p>​如果一切正常，运行上面的命令以后，就会返回一个命令行提示符。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@66d80f4aaf1e:/app#</span><br></pre></td></tr></table></figure><p>​这表示你已经在容器里面了，返回的提示符就是容器内部的 Shell 提示符。执行下面的命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@66d80f4aaf1e:/app# node demos/01.js</span><br></pre></td></tr></table></figure><p>​这时，Koa 框架已经运行起来了。打开本机的浏览器，访问 <a href="http://127.0.0.1:8000，网页显示"Not">http://127.0.0.1:8000，网页显示&quot;Not</a> Found”，这是因为这个 <a href="https://github.com/ruanyf/koa-demos/blob/master/demos/01.js">demo</a> 没有写路由。</p><p>这个例子中，Node 进程运行在 Docker 容器的虚拟环境里面，进程接触到的文件系统和网络接口都是虚拟的，与本机的文件系统和网络接口是隔离的，因此需要定义容器与物理机的端口映射（map）。</p><p>现在，在容器的命令行，按下 Ctrl + c 停止 Node 进程，然后按下 Ctrl + d （或者输入 exit）退出容器。此外，也可以用<code>docker container kill</code>终止容器运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在本机的另一个终端窗口，查出容器的 ID</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">ls</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止指定的容器运行</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">kill</span> [containerID]</span></span><br></pre></td></tr></table></figure><p>容器停止运行之后，并不会消失，用下面的命令删除容器文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查出容器的 ID</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">ls</span> --all</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定的容器文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">rm</span> [containerID]</span></span><br></pre></td></tr></table></figure><p>也可以使用<code>docker container run</code>命令的<code>--rm</code>参数，在容器终止运行后自动删除容器文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container run --<span class="built_in">rm</span> -p 8000:3000 -it koa-demo /bin/bash</span></span><br></pre></td></tr></table></figure><h1 id="八、容器的其他命令"><a href="#八、容器的其他命令" class="headerlink" title="八、容器的其他命令"></a>八、容器的其他命令</h1><p>docker 的主要用法就是上面这些，此外还有几个命令，也非常有用。</p><h2 id="8-1、docker-container-start"><a href="#8-1、docker-container-start" class="headerlink" title="8.1、docker container start"></a>8.1、<strong>docker container start</strong></h2><p>​前面的<code>docker container run</code>命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用<code>docker container start</code>命令，它用来启动已经生成、已经停止运行的容器文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container start [containerID]</span></span><br></pre></td></tr></table></figure><h2 id="8-2、docker-container-stop"><a href="#8-2、docker-container-stop" class="headerlink" title="8.2、docker container stop"></a>8.2、<strong>docker container stop</strong></h2><p>​前面的<code>docker container kill</code>命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而<code>docker container stop</code>命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container stop [containerID]</span></span><br></pre></td></tr></table></figure><h2 id="8-3、docker-container-logs"><a href="#8-3、docker-container-logs" class="headerlink" title="8.3、docker container logs"></a>8.3、<strong>docker container logs</strong></h2><p>​<code>docker container logs</code>命令用来查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果<code>docker run</code>命令运行容器的时候，没有使用<code>-it</code>参数，就要用这个命令查看输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container logs [containerID]</span></span><br></pre></td></tr></table></figure><h2 id="8-4、docker-container-exec"><a href="#8-4、docker-container-exec" class="headerlink" title="8.4、docker container exec"></a>8.4、<strong>docker container exec</strong></h2><p>​<code>docker container exec</code>命令用于进入一个正在运行的 docker 容器。如果<code>docker run</code>命令运行容器的时候，没有使用<code>-it</code>参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container <span class="built_in">exec</span> -it [containerID] /bin/bash</span><br></pre></td></tr></table></figure><h2 id="8-5、docker-container-cp"><a href="#8-5、docker-container-cp" class="headerlink" title="8.5、docker container cp"></a>8.5、<strong>docker container cp</strong></h2><p>​<code>docker container cp</code>命令用于从正在运行的 Docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container <span class="built_in">cp</span> [containID]:[/path/to/file] .</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven私服安装和使用</title>
      <link href="/2024/12/11/maven%E7%A7%81%E6%9C%8D%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/12/11/maven%E7%A7%81%E6%9C%8D%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="maven私服安装和使用"><a href="#maven私服安装和使用" class="headerlink" title="maven私服安装和使用"></a>maven私服安装和使用</h1><h2 id="1、官网下载"><a href="#1、官网下载" class="headerlink" title="1、官网下载"></a>1、官网下载</h2><p><a href="https://www.sonatype.com/products/repository-oss-downloadNexus">下载地址</a></p><p>本文主要是 Mac 安装，本文写于2024-05-07，下载的版本为 nexus-3.67.1-01-mac.tgz</p><p><strong>注意：nexus3 的 环境必须为 jdk8</strong></p><h2 id="2、解压"><a href="#2、解压" class="headerlink" title="2、解压"></a>2、解压</h2><p>将文件复制到 &#x2F;Users&#x2F;xx&#x2F;environment&#x2F;nexus,存放的目录可以按照自己的喜好来。对文件进行解压。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nexus-3.67.1-01-mac.tgz</span><br></pre></td></tr></table></figure><h2 id="3、启动-nexus"><a href="#3、启动-nexus" class="headerlink" title="3、启动 nexus"></a>3、启动 nexus</h2><h3 id="3-1、修改配置文件"><a href="#3-1、修改配置文件" class="headerlink" title="3.1、修改配置文件"></a>3.1、修改配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cd /Users/xx/environment/nexus/nexus-3.67.1-01/etc </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim nexus-default.properties</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Jetty section</span></span><br><span class="line">application-port=8081</span><br><span class="line">application-host=0.0.0.0</span><br><span class="line">nexus-args=$&#123;jetty.etc&#125;/jetty.xml,$&#123;jetty.etc&#125;/jetty-http.xml,$&#123;jetty.etc&#125;/jetty-requestlog.xml</span><br><span class="line">nexus-context-path=/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Nexus section</span></span><br><span class="line">nexus-edition=nexus-pro-edition</span><br><span class="line">nexus-features=\</span><br><span class="line"> nexus-pro-feature</span><br><span class="line"></span><br><span class="line">nexus.hazelcast.discovery.isEnabled=true</span><br></pre></td></tr></table></figure><p>当前默认的的启动端口为8081，如果被占用，就换一个端口。nexus-context-path&#x3D;&#x2F; 为启动路径，后面可以按照自己的喜好进行拼接，</p><p>如果拼接了参数，nexus 启动成功后，打开的网页路径后面也需要拼接上拼接的参数。</p><h3 id="3-2、启动"><a href="#3-2、启动" class="headerlink" title="3.2、启动"></a>3.2、启动</h3><p>进入 bin 目录，执行 启动命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nexus run</span><br></pre></td></tr></table></figure><p><strong>注意：有些文档用的 nexus start 命令进行启动，本人试过，弹出 Starting nexus,但是实际上并没有启动。</strong></p><h3 id="3-3、访问地址"><a href="#3-3、访问地址" class="headerlink" title="3.3、访问地址"></a>3.3、访问地址</h3><p>访问 <a href="http://localhost:8081/">http://localhost:8081/</a> 进入首页，登陆账户为 admini, 以前 admin 的初始密码为 admin123，后来密码改为写在 sonatype-work&#x2F;nexus3&#x2F;admin.password 文件中。使用 vim 命令查看。登陆后记得修改密码。</p>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx入门</title>
      <link href="/2024/12/11/nginx%E5%85%A5%E9%97%A8/"/>
      <url>/2024/12/11/nginx%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>​官方描述: 【nginx [engine x] is an HTTP and reverse proxy server, a mail proxy server, and a generic TCP&#x2F;UDP proxy server, According to Netcraft, nginx served or proxied 23.20% busiest sites in January 2021】<strong>nginx是一个Http服务器、反向代理服务器、邮件代理服务器、和通用TCP&#x2F;UDP代理服务器</strong>,根据Netcraft统计,截至2021年,它代理了世界上最繁忙的网站的比例达到了23.20%。</p><h1 id="二、为什么使用nginx"><a href="#二、为什么使用nginx" class="headerlink" title="二、为什么使用nginx"></a>二、为什么使用nginx</h1><pre><code> 根据Nginx中的官方网站的介绍我们知道,nginx的功能强大,在实际的工作中,我们会有很多场景会需要借助nginx来实现,比如:</code></pre><p>  1、想要访问外国的网站,但是因为某些原因,国内直接访问会被限制,因此可以通过nginx的正向代理来实现”科学上网”。</p><p>  2、在某种工作环境下,项目部署在内网,无法访问外网的资源,可以使用nginx进行代理完成此需求。</p><p>  3、项目是完全前后端分离开发,需要分布部署前后端项目,此时可以将前端项目部署到nginx中,因为nginx处理静态资源的效率比常见的应用服务器如Tomcat的要快很多。</p><p>  4、nginx支持负载均衡,可以更大程度的提高服务器的使用效率。</p><p>  5、除此之外,nginx还可以用作请求拦截,根据配置文件的配置,可以对请求路径进行自定义拦截。</p><h1 id="三、nginx的功能"><a href="#三、nginx的功能" class="headerlink" title="三、nginx的功能"></a>三、nginx的功能</h1><pre><code>   **1、缓存静态文件(html,css,js)**：实现完全的前后端分离,且它处理静态文件的效率是应用服务器的几倍。</code></pre><p>  <strong>2、反向代理:</strong> 当真实服务器不能被直接访问到时,nginx可作为反向代理服务,用于中间做转发</p><p>  <strong>3、web缓存:</strong> 可以对不同的文件做不同的缓存处理，配置灵活，并且支持FastCGI_Cache，主要用于对FastCGI的动态程序进行缓存。配合着第三方的ngx_cache_purge，对制定的URL缓存内容可以的进行增删管理。</p><p>  <strong>4、正向代理:</strong> 实现”科学上网”</p><p>  <strong>5、负载均衡:</strong> 更大程度提高服务器的使用效率</p><p>  <strong>6、邮件代理服务器:</strong> 实现轻松扩展邮件服务器的数量、根据不同的规则选择邮件服务器，例如，根据客户的IP地址选择最近的服务器,实现邮件服务器的负载均衡</p><h1 id="四、nginx的常用命令"><a href="#四、nginx的常用命令" class="headerlink" title="四、nginx的常用命令"></a>四、nginx的常用命令</h1><p>​    <strong>启动：</strong>.&#x2F;nginx 或者 .&#x2F;nginx -c &#x2F;配置文件的路径</p><p>  <strong>停止:</strong> .&#x2F;nginx -s stop</p><p>  <strong>重启:</strong> .&#x2F;nginx -s reload</p><p>  <strong>检查配置文件:</strong> .&#x2F;nginx -t</p><p>  <strong>查看nginx启动情况:</strong> ps -ef | grep nginx</p><p>注: 需要切换到安装好的nginx对应的sbin目录。</p><h1 id="五-nginx的配置文件详解"><a href="#五-nginx的配置文件详解" class="headerlink" title="五:nginx的配置文件详解"></a>五:nginx的配置文件详解</h1><p>​注:nginx的配置文件在安装后的nginx目录下的conf文件夹中</p><h2 id="一-刚安装好的配置文件具体如下"><a href="#一-刚安装好的配置文件具体如下" class="headerlink" title="(一):刚安装好的配置文件具体如下:"></a><strong>(一):刚安装好的配置文件具体如下:</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">error_log  logs/error.log  info;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pid        logs/nginx.pid;</span></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-配置详解"><a href="#二-配置详解" class="headerlink" title="(二)配置详解"></a><strong>(二)配置详解</strong></h2><p>​<strong>1、根据上面的nginx配置文件,可以将nginx的配置分为以下的组成结构</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">... #全局快</span><br><span class="line">events &#123;  #events快</span><br><span class="line">&#125;</span><br><span class="line">http&#123; #http块</span><br><span class="line">    server &#123; #server快</span><br><span class="line">        location &#123; #location快</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<strong>2、每块的结构功能</strong></p><p>​<strong>(1)、全局块:</strong> 配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</p><p>  <strong>(2)、events块:</strong> 配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等</p><p>  <strong>(3)、http块:</strong> 可以配置多个server,配置代理、缓存、日志定义等能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</p><p>  <strong>(4)、server块:</strong> 配置虚拟主机的相关参数，一个http中可以有多个server。</p><p>  <strong>(5)、location块:</strong> 配置请求的路由，以及各种页面的处理情况。</p><p>​<strong>3、nginx配置文件详细的解释</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">########## 每个指令必须有分号结束。#################</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">user administrator administrators;  <span class="comment">#配置用户或者组，默认为nobody nobody。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">worker_processes 2;  <span class="comment">#允许生成的进程数，默认为1</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pid /nginx/pid/nginx.pid;   <span class="comment">#指定nginx进程运行文件存放地址</span></span></span><br><span class="line">error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="line">events &#123;</span><br><span class="line">    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on</span><br><span class="line">    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off</span><br><span class="line">    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span><br><span class="line">    worker_connections  1024;    #最大连接数，默认为512</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   #文件扩展名与文件类型映射表</span><br><span class="line">    default_type  application/octet-stream; #默认文件类型，默认为text/plain</span><br><span class="line">    #access_log off; #取消服务日志    </span><br><span class="line">    log_format myFormat &#x27;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#x27;; #自定义格式</span><br><span class="line">    access_log log/access.log myFormat;  #combined为日志格式的默认值</span><br><span class="line">    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br><span class="line">    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br><span class="line">    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。</span><br><span class="line"></span><br><span class="line">    upstream mysvr &#123;   </span><br><span class="line">      server 127.0.0.1:7878;</span><br><span class="line">      server 192.168.10.121:3333 backup;  #热备</span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 https://www.baidu.com; #错误页</span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120; #单连接请求上限次数。</span><br><span class="line">        listen       4545;   #监听端口</span><br><span class="line">        server_name  127.0.0.1;   #监听地址       </span><br><span class="line">        location  ~*^.+$ &#123;       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">           #root path;  #根目录</span><br><span class="line">           #index vv.txt;  #设置默认页</span><br><span class="line">           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表</span><br><span class="line">           deny 127.0.0.1;  #拒绝的ip</span><br><span class="line">           allow 172.18.5.54; #允许的ip           </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六-nginx中常用的小知识"><a href="#六-nginx中常用的小知识" class="headerlink" title="六: nginx中常用的小知识"></a>六: nginx中常用的小知识</h1><h2 id="1、配置文件中常用的变量-可以用于请求拦截或者匹配路由"><a href="#1、配置文件中常用的变量-可以用于请求拦截或者匹配路由" class="headerlink" title="1、配置文件中常用的变量,可以用于请求拦截或者匹配路由"></a><strong>1、配置文件中常用的变量,可以用于请求拦截或者匹配路由</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.$remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；</span><br><span class="line">2.$remote_user ：用来记录客户端用户名称；</span><br><span class="line">3.$time_local ： 用来记录访问时间与时区；</span><br><span class="line">4.$request ： 用来记录请求的url与http协议；</span><br><span class="line">5.$status ： 用来记录请求状态；成功是200；</span><br><span class="line">6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；</span><br><span class="line">7.$http_referer ：用来记录从那个页面链接访问过来的；</span><br><span class="line">8.$http_user_agent ：记录客户端浏览器的相关信息；</span><br></pre></td></tr></table></figure><h2 id="2、location下常见的参数含义解释"><a href="#2、location下常见的参数含义解释" class="headerlink" title="2、location下常见的参数含义解释"></a><strong>2、location下常见的参数含义解释</strong></h2><p>​(1)、try_files参数(常用于部署前端项目时使用)</p><p>​具体含义:如: 请求路径是:<a href="http://localhost/demo%EF%BC%8C%E5%9C%A8location%E4%B8%AD%E9%85%8D%E7%BD%AE:try_files">http://localhost/demo，在location中配置:try_files</a> $uri KaTeX parse error: Expected ‘EOF’, got ‘&amp;’ at position 30: …ml的含义:<br><br> &amp;̲#8195;&amp;#…uri便是demo,try_files的作用,它会先去到硬盘中查找是否存在demo这个文件,如果存在则返回,如果不存在,则查找是否存在&#x2F;r o o t &#x2F; d e m o &#x2F; 的 目 目 录 ( root&#x2F;demo&#x2F; 的目目录(root&#x2F;demo&#x2F;的目目录(uri&#x2F;),如果找不到,则会fallback到try_files的最后一个选项index.html,发起一个内部 “子请求”，也就是相当于 nginx 发起一个 HTTP 请求到 <a href="http://localhost/index.html%E3%80%82">http://localhost/index.html。</a></p><p>​(2)、root和index参数</p><p>​root：表示根目录、index：表示默认页</p><p>​(3)、proxy_set_header参数</p><p>​用来重定义发往后端服务器的请求头，Value值可以是包含文本、变量或者它们的组合.</p><p>​格式: proxy_set_header Field Value;</p><p>  原http请求的Header中的Host字段也放到转发的请求里。如果不加这一行的话，nginx转发的请求header里就不会有Host字段，而服务器是靠这个Host值来区分你请求的是哪个域名的资源的</p><p>​(4)、X-Forwarded-For参数</p><p>​用途: 为了记录整个的代理过程，如果存在多层代理跳转的情况下,可以通过它来获取到被代理的客户端的地址。</p><p>​(5)、X-Real-IP参数</p><p>​被代理的客户端的真是地址,在header里面的 X-Real-IP只是一个变量，后面的设置会覆盖前面的设置,一般只在第一个代理设置proxy_set_header X-Real-IP r e m o t e a d d r ; 就 好 了 ， 然 后 再 应 用 端 直 接 引 用 remote_addr;就好了，然后再应用端直接引用remoteaddr;就好了，然后再应用端直接引用http_x_real_ip就行.</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis入门</title>
      <link href="/2024/12/11/redis%E5%85%A5%E9%97%A8/"/>
      <url>/2024/12/11/redis%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h1><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redis是单线程的！      </span><br></pre></td></tr></table></figure><p>官方表示，Redis是基于内存操作，CPU不是Redis性能的瓶颈，Redis的瓶颈是机器的内存和网络带宽，所有使用单线程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为什么Redis单线程还这么快？</span><br></pre></td></tr></table></figure><p>1、误区1：高性能的服务器一定是多线程的？   </p><p>2、误区2：多线程一定比单线程效率高？</p><p>核心：redis是将所有的数据全部放在内存中的，所有说使用单线程去操作效率就是最高的，对于内存系统来说，如果没有上下文切换，效率就是最高的。多次读写都是在一个CPU上的，在内存情况下，这个就是最佳方案。</p><h2 id="二、Redis的五大数据类型"><a href="#二、Redis的五大数据类型" class="headerlink" title="二、Redis的五大数据类型"></a>二、Redis的五大数据类型</h2><h3 id="2-1、Redis-key"><a href="#2-1、Redis-key" class="headerlink" title="2.1、Redis-key"></a>2.1、Redis-key</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EXPIRE name 10  #设置key过期时间，单位是秒</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name     #查看当前key的剩余时间</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; type name#查看当前key的类型</span><br><span class="line">string</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2、String（字符串）"><a href="#2-2、String（字符串）" class="headerlink" title="2.2、String（字符串）"></a>2.2、String（字符串）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; FLUSHALL    #清空所有数据库</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set key1 v1   #设置值</span><br><span class="line">OK </span><br><span class="line">127.0.0.1:6379&gt; get key1     #获取key1的值</span><br><span class="line">&quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; EXISTS key1    #判断key1的值是否存在</span><br><span class="line">(integer) 1 </span><br><span class="line">127.0.0.1:6379&gt; APPEND key1 &quot;hello&quot;     #key1的值后面追加字符串，如果当前key不存在，则相当于set key</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;v1hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; STRLEN key1    #获取字符串的长度</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; APPEND key1 &quot;,wzd&quot;</span><br><span class="line">(integer) 11</span><br><span class="line">127.0.0.1:6379&gt; STRLEN key1</span><br><span class="line">(integer) 11</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;v1hello,wzd&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">127.0.0.1:6379&gt; set views 0  </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line">&quot;0&quot;</span><br><span class="line">127.0.0.1:6379&gt; INCR views   #自增1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line">&quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; INCR views</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line">&quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; DECR views   #自减1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; DECR views</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; DECR views</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379&gt; INCRBY views 10   #自增10   可以设置步长指定增量</span><br><span class="line">(integer) 9</span><br><span class="line">127.0.0.1:6379&gt; INCRBY views 10</span><br><span class="line">(integer) 19</span><br><span class="line">127.0.0.1:6379&gt; DECRBY views 10</span><br><span class="line">(integer) 9</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">字符串范围  range</span></span><br><span class="line">127.0.0.1:6379&gt; set key1 &quot;hello,wzd&quot;    #设置key1的值</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get kye1 </span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;hello,wzd&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE key1 0 3    #截取字符串[0,3]</span><br><span class="line">&quot;hell&quot;</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE key1 0 -1   #获取全部字符串，相当于get key</span><br><span class="line">&quot;hello,wzd&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">替换！</span></span><br><span class="line">127.0.0.1:6379&gt; set key2 abcdfg</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get kye2</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line">&quot;abcdfg&quot;</span><br><span class="line">127.0.0.1:6379&gt; SETRANGE key2 1 xx   #替换指定位置开始的字符串</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line">&quot;axxdfg&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">setex(<span class="built_in">set</span> with expire)  <span class="comment">#设置过期时间</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">setnx(<span class="built_in">set</span> <span class="keyword">if</span> not exist)  <span class="comment">#不存在再设置(在分布式锁中常用)</span></span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; setex key3 30 &quot;hello&quot;   #设置key3的值，30秒过期</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl key3</span><br><span class="line">(integer) 26</span><br><span class="line">127.0.0.1:6379&gt; get key3</span><br><span class="line">&quot;hello&quot; </span><br><span class="line">127.0.0.1:6379&gt; SETNX mykey &quot;redis&quot;   #如果mykey不存在，创建mykey</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;key1&quot;</span><br><span class="line">2) &quot;mykey&quot;</span><br><span class="line">3) &quot;key2&quot;</span><br><span class="line">127.0.0.1:6379&gt; ttl key3</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; setnx mykey &quot;mongoDB&quot;   #如果mykey存在，创建mykey失败</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line">&quot;redis&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">mset</span><br><span class="line">mget</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; MSET k1 v1 k2 v2 k3 v3    #同时设置多个值</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k1&quot;</span><br><span class="line">2) &quot;k2&quot;</span><br><span class="line">3) &quot;k3&quot;</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3   #同时获取多个值</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br><span class="line">3) &quot;v3&quot;</span><br><span class="line">127.0.0.1:6379&gt; MSETNX k1 v1 k4 v4   #mset 是一个原子性的操作，要么一起成功，要么一起失败</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">(nil)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">对象</span></span><br><span class="line">set user:1 &#123;name:zhangsan,age:3&#125;  #设置一个user:1对象，值为json字符串来保存一个对象</span><br><span class="line"></span><br><span class="line">这里的key是一个巧妙的设计：user:&#123;id&#125;:&#123;filed&#125;,如此设置在redis中是ok的</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; mset user:1:name zhangsan user:1:age 20</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class="line">1) &quot;zhangsan&quot;</span><br><span class="line">2) &quot;20&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">getset  #先get再set</span><br><span class="line">127.0.0.1:6379&gt; GETSET db redis    #如果不存在值，则返回nil</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line">&quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; getset db mongodb  #如果存在值，则返回原来的值，并设置新的值</span><br><span class="line">&quot;redis&quot;</span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line">&quot;mongodb&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br></pre></td></tr></table></figure><h3 id="2-3、List-列表"><a href="#2-3、List-列表" class="headerlink" title="2.3、List(列表)"></a>2.3、List(列表)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">27.0.0.1:6379&gt; LPUSH list one      #将一个值或者多个值插入列表的头部（左）</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list two</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list three</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1   #获取list中的值</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 1    #通过区间获取具体的值</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">127.0.0.1:6379&gt; RPUSH list right   #将一个值或者多个值插入列表的尾部（右）</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;one&quot;</span><br><span class="line">4) &quot;right&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">lpop   #移除列表的的第一个元素</span><br><span class="line">rpop   #移除列表的的最后一个元素</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1    </span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;one&quot;</span><br><span class="line">4) &quot;right&quot;</span><br><span class="line">127.0.0.1:6379&gt; LPOP list    #移除列表的的第一个元素</span><br><span class="line">&quot;three&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;one&quot;</span><br><span class="line">3) &quot;right&quot;</span><br><span class="line">127.0.0.1:6379&gt; RPOP list    #移除列表的的最后一个元素</span><br><span class="line">&quot;right&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;one&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">Lindex</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">2) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379&gt; LINDEX list 0   #通过下标获取list中的某一个值</span><br><span class="line">&quot;two&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">Llen</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list one</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list two</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list three</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; LLEN list    #返回列表的长度</span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">移除指定的值</span><br><span class="line">lrem </span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;three&quot;</span><br><span class="line">3) &quot;two&quot;</span><br><span class="line">4) &quot;one&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 one    #移除list集合中指定个数的value,精确匹配</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1  </span><br><span class="line">1) &quot;three&quot;</span><br><span class="line">2) &quot;three&quot;</span><br><span class="line">3) &quot;two&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 three</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list three</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrem list 2 three</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">trim     截取</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;hello1&quot;</span><br><span class="line">3) &quot;hello2&quot;</span><br><span class="line">4) &quot;hello3&quot;</span><br><span class="line">127.0.0.1:6379&gt; LTRIM mylist 1 2     #通过下标截取指定的长度，这个list已经被改变，截断只剩下截取的元素</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;hello1&quot;</span><br><span class="line">2) &quot;hello2&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">rpoplpush   #移除列表的最后一个元素，并将此元素移动到一个新的列表中</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;hello2&quot;</span><br><span class="line">2) &quot;hello1&quot;</span><br><span class="line">3) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; RPOPLPUSH mylist myotherlist   #移除列表的最后一个元素，并将此元素移动到一个新的列表中</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;hello2&quot;</span><br><span class="line">2) &quot;hello1&quot;</span><br><span class="line">127.0.0.1:6379&gt; LRANGE myotherlist 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">lset  #将列表中指定下标的值替换为另外一个值</span><br><span class="line">127.0.0.1:6379&gt; EXISTS list#判断这个列表是否存在</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; lset list 0 item        #不存在就会报错</span><br><span class="line">(error) ERR no such key</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list value1 </span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 0</span><br><span class="line">1) &quot;value1&quot;</span><br><span class="line">127.0.0.1:6379&gt; lset list 0 item         #如果存在，更新当前下标的值</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 0 </span><br><span class="line">1) &quot;item&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">linsert    #将具体的value插入到列表中某个元素的前面或者后面</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; LINSERT mylist before world other   #将具体的value插入到列表中某个元素的前面</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;other&quot;</span><br><span class="line">3) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; LINSERT mylist after world other    #将具体的value插入到列表中某个元素的后面</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;other&quot;</span><br><span class="line">3) &quot;world&quot;</span><br><span class="line">4) &quot;other&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小结</span><br></pre></td></tr></table></figure><pre><code> - 它实际上是一个列表，before Node after, left,right 都可以插入值  -  如果key不存在，创建新的链表  -  如果key存在，新增内容。  -  如果移除了所有的值，空链表，也代表不存在  -  在两边插入或者改动值，效率最高！中间元素，相对来说效率会低一点。</code></pre><h3 id="2-4、Set-集合"><a href="#2-4、Set-集合" class="headerlink" title="2.4、Set(集合)"></a>2.4、Set(集合)</h3><p>set中的值是不能重复的！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset hello      #set集合中添加元素</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset wzd</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset lov</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset       #查看set的所有值</span><br><span class="line">1) &quot;wzd&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;lov&quot;</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset hello    #判断某一个值是不是在set集合中</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset word</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">127.0.0.1:6379&gt; scard myset    #获取set集合中的内容元素个数</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; sadd myset wad</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset wzd   #set集合无法添加重复的值</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; scard myset</span><br><span class="line">(integer) 4</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;wzd&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;wad&quot;</span><br><span class="line">4) &quot;lov&quot;</span><br><span class="line">127.0.0.1:6379&gt; srem myset wad   #移除set集合中指定的元素</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;lov&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;wzd&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">set 无序不重复集合</span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset   #随机抽选出一个元素</span><br><span class="line">&quot;wzd&quot;</span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class="line">&quot;wzd&quot;</span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 2   #随机抽选出指定个数的元素</span><br><span class="line">1) &quot;wzd&quot;</span><br><span class="line">2) &quot;lov&quot;</span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 2</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;lov&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">删除指定的key，随机删除key</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;wzd&quot;</span><br><span class="line">3) &quot;lov&quot;</span><br><span class="line">127.0.0.1:6379&gt; spop myset   #随机删除set中的元素</span><br><span class="line">&quot;lov&quot;</span><br><span class="line">127.0.0.1:6379&gt; spop myset</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;wzd&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">SMOVE   将指定的值，移动到另外一个set集合中</span><br><span class="line">127.0.0.1:6379&gt; sadd myset hello</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset world</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset wzd</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset2 set2</span><br><span class="line">(integer) 1 </span><br><span class="line">127.0.0.1:6379&gt; SMOVE myset myset2 wzd   #将myset中指定的值，移动到另外一个集合myset2中</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset2</span><br><span class="line">1) &quot;set2&quot;</span><br><span class="line">2) &quot;wzd&quot;</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) &quot;world&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">数字集合类</span><br><span class="line">  -差集</span><br><span class="line">  -交集</span><br><span class="line">  -并集</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS key </span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS key1</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;d&quot;</span><br><span class="line">3) &quot;e&quot;</span><br><span class="line">127.0.0.1:6379&gt; SDIFF key key1   #差集</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">127.0.0.1:6379&gt; SINTER key key1  #交集</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; SUNION key key1  #并集</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;d&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">4) &quot;b&quot;</span><br><span class="line">5) &quot;e&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-5、Hash-哈希"><a href="#2-5、Hash-哈希" class="headerlink" title="2.5、Hash(哈希)"></a>2.5、Hash(哈希)</h3><p>Map集合，key-Map集合,本质和String类型没有太大区别</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset myhash field1 wzd#set一个具体 key-value</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hget myhash field1#获取一个字段值</span><br><span class="line">&quot;wzd&quot;</span><br><span class="line">127.0.0.1:6379&gt; hmset myhash field1 hello field2 world  #set多个 key-value</span><br><span class="line">OK  </span><br><span class="line">127.0.0.1:6379&gt; hmget myhash field1 field2    #获取多个字段值</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash   #获取全部数据</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;field2&quot;</span><br><span class="line">4) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; hdel myhash field1   #删除hash指定的key字段，对应的value也就消失了</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) &quot;field2&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">hlen     </span><br><span class="line">127.0.0.1:6379&gt; hmset myhash field1 hello field2 world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HGETALL myhash</span><br><span class="line">1) &quot;field2&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">3) &quot;field1&quot;</span><br><span class="line">4) &quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt; hlen myhash#获取hash表的字段数量</span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">127.0.0.1:6379&gt; HEXISTS myhash field1    #判断hash中指定的字段是否存在</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS myhash field3</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">只获得所有的field</span><br><span class="line">只获得所有的value</span><br><span class="line">127.0.0.1:6379&gt; hkeys myhash  #获得所有的field</span><br><span class="line">1) &quot;field2&quot;</span><br><span class="line">2) &quot;field1&quot;</span><br><span class="line">127.0.0.1:6379&gt; HVALS myhash  #获得所有的value</span><br><span class="line">1) &quot;world&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">incr  decr</span><br><span class="line">127.0.0.1:6379&gt; hset myhash field3 5    #指定增量</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY myhash field3 1   </span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY myhash field3 -1</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash field4 hello    #如果不存在，则可以设置</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hsetnx myhash field4 world    #如果存在，则不能设置</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hash变更的的数据 user name age,尤其是用户信息之类的，经常变动的信息！hash更适合于对象的存储，String更加适合字符串存储</p><h3 id="2-6、Zset-有序集合"><a href="#2-6、Zset-有序集合" class="headerlink" title="2.6、Zset(有序集合)"></a>2.6、Zset(有序集合)</h3><p>在set的基础上，增加了一个值，set k1 v1  ,zse  k1 score v1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myset 1 one    #添加一个值</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD myset 2 two 3 three  #添加多个值</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 -1   #查看myset的所有值</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">3) &quot;three&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">排序如何实现</span><br><span class="line">127.0.0.1:6379&gt; ZADD salary 2500 xiaohong    #添加三个用户的</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD salary 5000 zhangsan</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD salary 500 wzd</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf   #显示全部的用户，从小到大排序</span><br><span class="line">1) &quot;wzd&quot;</span><br><span class="line">2) &quot;xiaohong&quot;</span><br><span class="line">3) &quot;zhangsan&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE salary 0 -1      #显示全部的用户，从大到小排序</span><br><span class="line">1) &quot;zhangsan&quot;</span><br><span class="line">2) &quot;wzd&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf withscores    #显示全部用户，并且附带成绩</span><br><span class="line">1) &quot;wzd&quot;</span><br><span class="line">2) &quot;500&quot;</span><br><span class="line">3) &quot;xiaohong&quot;</span><br><span class="line">4) &quot;2500&quot;</span><br><span class="line">5) &quot;zhangsan&quot;</span><br><span class="line">6) &quot;5000&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf 2500 withscores   #显示工资小于2500的员工的升序排列</span><br><span class="line">1) &quot;wzd&quot;</span><br><span class="line">2) &quot;500&quot;</span><br><span class="line">3) &quot;xiaohong&quot;</span><br><span class="line">4) &quot;2500&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">移除元素</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE salary 0 -1</span><br><span class="line">1) &quot;wzd&quot;</span><br><span class="line">2) &quot;xiaoming&quot;</span><br><span class="line">3) &quot;zhangsan&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrem salary xiaoming   #移除元素</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE salary 0 -1</span><br><span class="line">1) &quot;wzd&quot;</span><br><span class="line">2) &quot;zhangsan&quot;</span><br><span class="line">127.0.0.1:6379&gt; zcard salary   #获取有序集合中的个数</span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################################################################</span></span></span><br><span class="line">127.0.0.1:6379&gt; zadd myset 1 hello </span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 2 world 3 wzd</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT myset 1 3    #获取指定区间的成员数量</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT myset 1 2</span><br><span class="line">(integer) 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、三种特殊数据类型"><a href="#三、三种特殊数据类型" class="headerlink" title="三、三种特殊数据类型"></a>三、三种特殊数据类型</h2><h3 id="3-1、geospatial-地理位置"><a href="#3-1、geospatial-地理位置" class="headerlink" title="3.1、geospatial  地理位置"></a>3.1、geospatial  地理位置</h3><p>朋友的地位，附近的人，距离计算，使用redis的Geo,这个功能可以推算地理位置的信息，两地之间的距离，方圆几里的人！</p><p>只有六个命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GEOADD</span><br><span class="line">GEODIST</span><br><span class="line">GEOHASH</span><br><span class="line">GEOPOS</span><br><span class="line">GEORADIUS</span><br><span class="line">GEORADIUSBYMEMBER</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#geoadd   添加地理位置</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">规则：两极无法添加，我们一般会下载城市数据，直接通过java程序一次性导入</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参数  key  值（经度、纬度、名称）</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">有效的经度从-180度到180度。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">有效的纬度从-85.05112878度到85.05112878度。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当坐标位置超出上述指定范围时，该命令将会返回一个错误。</span></span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 39.90 116.40 beijing</span><br><span class="line">(error) ERR invalid longitude,latitude pair 39.900000,116.400000</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 116.40 39.90 beijing      #添加城市数据</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 shanghai</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 chongqin 114.05 22.52 shenzhen</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 120.16 30.24 hangzhou 108.96 34.26 xian</span><br><span class="line">(integer) 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#geopos  从key里返回所有给定位置元素的位置（经度和纬度）</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos china:city beijing   #获取指定的城市的经纬度</span><br><span class="line">1) 1) &quot;116.39999896287918091&quot;</span><br><span class="line">   2) &quot;39.90000009167092543&quot;</span><br><span class="line">127.0.0.1:6379&gt; geopos china:city beijing chongqin</span><br><span class="line">1) 1) &quot;116.39999896287918091&quot;</span><br><span class="line">   2) &quot;39.90000009167092543&quot;</span><br><span class="line">2) 1) &quot;106.49999767541885376&quot;</span><br><span class="line">   2) &quot;29.52999957900659211&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#geodist</span><br><span class="line">返回两个给定位置之间的距离。</span><br><span class="line">如果两个位置之间的其中一个不存在， 那么命令返回空值。</span><br><span class="line">指定单位的参数 unit 必须是以下单位的其中一个</span><br><span class="line">m 表示单位为米。</span><br><span class="line">km 表示单位为千米。</span><br><span class="line">mi 表示单位为英里。</span><br><span class="line">ft 表示单位为英尺。</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEODIST china:city beijing shanghai km   #查看上海到北京的直线距离</span><br><span class="line">&quot;1067.3788&quot;</span><br><span class="line">127.0.0.1:6379&gt; GEODIST china:city beijing shanghai </span><br><span class="line">&quot;1067378.7564&quot;</span><br><span class="line">127.0.0.1:6379&gt; GEODIST china:city beijing chongqin km   #查看重庆到北京的直线距离</span><br><span class="line">&quot;1464.0708&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#georadius </span><br><span class="line">以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。</span><br><span class="line">范围可以使用以下其中一个单位：</span><br><span class="line">m 表示单位为米。</span><br><span class="line">km 表示单位为千米。</span><br><span class="line">mi 表示单位为英里。</span><br><span class="line">ft 表示单位为英尺。</span><br></pre></td></tr></table></figure><p>我附近的人？（获取所有附近的人的地址，定位！）通过半径来查询！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 1000 km   #查询110，30这个经纬度为中心，寻找方圆1000km之内的所有城市</span><br><span class="line">1) &quot;chongqin&quot;</span><br><span class="line">2) &quot;xian&quot;</span><br><span class="line">3) &quot;shenzhen&quot;</span><br><span class="line">4) &quot;hangzhou&quot;</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km  #查询当前位置500km之内的所有城市</span><br><span class="line">1) &quot;chongqin&quot;</span><br><span class="line">2) &quot;xian&quot; </span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist   #查询当前位置500km之内的所有城市，包含直线距离</span><br><span class="line">1) 1) &quot;chongqin&quot;</span><br><span class="line">   2) &quot;341.9374&quot;</span><br><span class="line">2) 1) &quot;xian&quot;</span><br><span class="line">   2) &quot;483.8340&quot;</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord  #查询当前位置500km之内的所有城市，包含直线距离，经纬度</span><br><span class="line">1) 1) &quot;chongqin&quot;</span><br><span class="line">   2) &quot;341.9374&quot;</span><br><span class="line">   3) 1) &quot;106.49999767541885376&quot;</span><br><span class="line">      2) &quot;29.52999957900659211&quot;</span><br><span class="line">2) 1) &quot;xian&quot;</span><br><span class="line">   2) &quot;483.8340&quot;</span><br><span class="line">   3) 1) &quot;108.96000176668167114&quot;</span><br><span class="line">      2) &quot;34.25999964418929977&quot;</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord count 1  #查询当前位置500km之内的所有城市，包含直线距离，经纬度，只查询一个</span><br><span class="line">1) 1) &quot;chongqin&quot;</span><br><span class="line">   2) &quot;341.9374&quot;</span><br><span class="line">   3) 1) &quot;106.49999767541885376&quot;</span><br><span class="line">      2) &quot;29.52999957900659211&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">georadiusbymember</span> </span><br><span class="line">找出位于指定范围内的元素，GEORADIUSBYMEMBER 的中心点是由给定的位置元素决定的， 而不是像 GEORADIUS 那样， 使用输入的经度和纬度来决定中心点</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">找出位于指定元素周围的其他元素</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city beijing 1000 km   </span><br><span class="line">1) &quot;beijing&quot;</span><br><span class="line">2) &quot;xian&quot;</span><br><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city shanghai 400 km</span><br><span class="line">1) &quot;hangzhou&quot;</span><br><span class="line">2) &quot;shanghai&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#geohash</span><br><span class="line">返回一个或多个位置元素的 Geohash 表示</span><br></pre></td></tr></table></figure><p>该命令将返回11个字符的Geohash字符串!</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将二维的经纬度转换为一维的字符串，如果两个字符串越接近，则距离越近</span></span><br><span class="line">127.0.0.1:6379&gt; GEOHASH china:city beijing chongqin</span><br><span class="line">1) &quot;wx4fbxxfke0&quot;</span><br><span class="line">2) &quot;wm5xzrybty0&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GEO底层的实现原理其实就是Zset!我们可以收用Zset命令来操作geo!</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE china:city 0 -1      #查看地图中全部元素</span><br><span class="line">1) &quot;chongqin&quot; </span><br><span class="line">2) &quot;xian&quot;</span><br><span class="line">3) &quot;shenzhen&quot;</span><br><span class="line">4) &quot;hangzhou&quot;</span><br><span class="line">5) &quot;shanghai&quot;</span><br><span class="line">6) &quot;beijing&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrem china:city beijing   #移除指定元素</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE china:city 0 -1</span><br><span class="line">1) &quot;chongqin&quot;</span><br><span class="line">2) &quot;xian&quot;</span><br><span class="line">3) &quot;shenzhen&quot;</span><br><span class="line">4) &quot;hangzhou&quot;</span><br><span class="line">5) &quot;shanghai&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2、Hyperloglog-数据结构"><a href="#3-2、Hyperloglog-数据结构" class="headerlink" title="3.2、Hyperloglog 数据结构"></a>3.2、Hyperloglog 数据结构</h3><p>什么是基数？</p><p>A{1，3，5，7，8，7}</p><p>B{1，3，5，7，8}</p><p>基数（不重复的元素）&#x3D; 5，可以接受误差。</p><blockquote><p>简介</p></blockquote><p>Redis Hyperloglog  基数统计的算法！</p><p>优点：占用的内存是固定的，2^64不同元素的技术，只需要废12kb内存！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">测试使用</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; PFADD mykey a b c d e f g h i j    #创建第一组元素mykey</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT mykey     #统计mykey中元素的基数数量</span><br><span class="line">(integer) 10</span><br><span class="line">127.0.0.1:6379&gt; PFADD mykey2 i j z x c v b n m   #创建第一组元素mykey2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT mykey2</span><br><span class="line">(integer) 9</span><br><span class="line">127.0.0.1:6379&gt; PFMERGE mykey3 mykey mykey2   #合并两组  mykey  mykey2  =&gt; mykey3 并集</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT mykey3   #查看并集的数量</span><br><span class="line">(integer) 15</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-3、Bitmap-位图"><a href="#3-3、Bitmap-位图" class="headerlink" title="3.3、Bitmap   位图"></a>3.3、Bitmap   位图</h3><p>Bitmap   位图，数据结构，都是操作二进制来记录，就只有0和1两个状态！</p><p>使用bitmap来记录 周一到周日的打卡！</p><p>周一：1  周二：0  周三：0  周四：1  周五：1 周六：0  周日：0  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">测试使用</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; setbit sign 0 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 1 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 2 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 3 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 4 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 5 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 6 0</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><p>查看某一天是否打卡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GETBIT sign 3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; GETBIT sign 6</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><p>统计打卡的天数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BITCOUNT sign   #统计这周的打卡记录，就可以看到是否有全勤</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><h2 id="四、事务"><a href="#四、事务" class="headerlink" title="四、事务"></a>四、事务</h2><p>Redis事务本质：一组命令的集合！一个事务中的所有命令都会被序列化，在事务执行过程中，会按照顺序执行！</p><p>一次性、顺序性、排他性，执行一系列的命令！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--------- 队列  set  set  set 执行 -------------</span><br></pre></td></tr></table></figure><p>Redis事务没有隔离级别的概念</p><p>所有的命令在事务中，并没有被执行，只有发起执行命令的时候才会执行（Exec）！</p><p>Redis单条命令是保证原子性的，但是redis事务不保证原子性！</p><p>redis的事务：</p><pre><code>- 开启事务（Multi）- 命令入队（...）- 执行事务（exec）</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">正常执行事务！</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; MULTI   #开启事务</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">入队命令</span></span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt;  set k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC  #执行事务</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) &quot;v2&quot;</span><br><span class="line">4) OK</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#放弃事务</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI   #开启事务</span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">入队命令</span></span><br><span class="line">127.0.0.1:6379&gt; set k1 v1 </span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; DISCARD    #取消事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k4   #事务队列中的命令都不会执行</span><br><span class="line">(nil)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编译型异常（命令有错！），事务中所有的命令都不会被执行</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1 </span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k3    #错误的命令</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;getset&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; set k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k5 v5</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC   #执行事务报错</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k5   #所有的命令都不会被执行</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get k2  #所有的命令都不会被执行</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行时异常,如果事务队列中存在语法错误，那么执行命令的时候，其他命令是可以正常执行的，错误命令会抛出异常！</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 &quot;v1&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCR k1   #执行的时候失败</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k3 </span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) (error) ERR value is not an integer or out of range   #虽然第一条命令报错了，但是依旧正常执行成功了</span><br><span class="line">2) OK</span><br><span class="line">3) OK</span><br><span class="line">4) &quot;v3&quot;</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">&quot;v2&quot;</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">&quot;v3&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">监控！ Watch</span><br></pre></td></tr></table></figure><h3 id="4-1、悲观锁："><a href="#4-1、悲观锁：" class="headerlink" title="4.1、悲观锁："></a>4.1、悲观锁：</h3><ul><li>很悲观，认为什么时候都会出问题，无论做什么都会加锁！</li></ul><h3 id="4-2、乐观锁："><a href="#4-2、乐观锁：" class="headerlink" title="4.2、乐观锁："></a>4.2、乐观锁：</h3><ul><li>很乐观，认为什么时候都不会出问题，所有不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过数据。</li><li>获取version</li><li>更新的时候比较version</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redis的监视测试</span><br></pre></td></tr></table></figure><p>正常执行成功！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; WATCH money   #监视 money 对象</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set out 0 </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI  #事务正常结束，数据期间没有发生变动，这个时候就正常执行成功</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC</span><br><span class="line">1) (integer) 80</span><br><span class="line">2) (integer) 20</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试多线程修改值，使用watch可以当作redis的乐观锁操作！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get money    </span><br><span class="line">&quot;80&quot;</span><br><span class="line">127.0.0.1:6379&gt; watch money   #监视money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; DECRBY money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; INCRBY out 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; EXEC   #执行之前，另外一个线程修改了money的值，这个时候就会导致事务执行失败</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; unwatch   #取消监视money(如果事务执行失败，先解锁)</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch money   #重新监视money（获取锁）</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h2 id="五、Redis持久化"><a href="#五、Redis持久化" class="headerlink" title="五、Redis持久化"></a>五、Redis持久化</h2><h3 id="5-1、RDB-（Redis-DataBase"><a href="#5-1、RDB-（Redis-DataBase" class="headerlink" title="5.1、RDB （Redis DataBase)"></a>5.1、RDB （Redis DataBase)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">触发机制</span><br><span class="line">1、save规则满足的情况下，，会触发rdb规则</span><br><span class="line">2、执行flushall命令，也会出发rdb规则</span><br><span class="line">3、退出redis，也会产生rdb文件</span><br></pre></td></tr></table></figure><p>备份就会自动生成一个dump.rdb文件。</p><p>如何恢复rdb文件？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只需要将rdb文件放到redis启动目录下就可以，redis启动时会自动检查dump.rdb文件，恢复其中的数据</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;/usr/local/bin&quot;    #如果在这个目录下存在dump.rdb文件，启动redis就会自动恢复其中的数据</span><br></pre></td></tr></table></figure><p>优点：</p><p>1、适合大规模的数据恢复!</p><p>2、对数据的完整性要求不高！</p><p>缺点：</p><p>1、需要一定的时间间隔进行操作，如果redis意外宕机了，最后一次修改的数据就没有了！</p><p>2、fock进程的时候，会占用一定的内存空间！</p><h3 id="5-2、AOF-Append-Only-File"><a href="#5-2、AOF-Append-Only-File" class="headerlink" title="5.2、AOF  (Append Only File)"></a>5.2、AOF  (Append Only File)</h3><p>将我们所有的命令记录下来，恢复的时候把这个文件全部再执行一遍。</p><p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据。</p><p>Aof保存的是appendinly.aof文件</p><p><img src="C:\Users\wangrui\AppData\Roaming\Typora\typora-user-images\image-20201106101315000.png" alt="image-20201106101315000"></p><p>默认是不开启的，需要手动进行配置！我们只需要将appendonly 改为yes就开启了aof.</p><p>重启redis就可以生效。</p><p>如果这个aof文件有错误，这时候redis是启动不起来的，我们需要修复aof文件，redis给我们提供了这样一个工具  redis-check-aof –fix</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# redis-check-aof --fix appendonly.aof </span><br><span class="line">0x              4d: Expected \r\n, got: 6176</span><br><span class="line">AOF analyzed: size=84, ok_up_to=52, diff=32</span><br><span class="line">This will shrink the AOF from 84 bytes, with 32 bytes, to 52 bytes</span><br><span class="line">Continue? [y/N]: y</span><br><span class="line">Successfully truncated AOF</span><br></pre></td></tr></table></figure><p>如果文件正常，重启就可以恢复了。</p><p>优点：</p><p>1、每次修改都同步，文件完整性更加好</p><p>2、每秒同步一次，可能会丢失一秒的数据</p><p>缺点：</p><p>1、相对于数据文件来说，aof远远大于rdb,修复的速度也比rdb慢。</p><p>2、aof运行效率也要比rdb慢，所有redis默认的配置就是rdb持久化！</p><h2 id="六、Redis主从复制"><a href="#六、Redis主从复制" class="headerlink" title="六、Redis主从复制"></a>六、Redis主从复制</h2><h3 id="6-1、环境配置"><a href="#6-1、环境配置" class="headerlink" title="6.1、环境配置"></a>6.1、环境配置</h3><p>只配置从库，不用配置主库！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication     #查看当前库的信息</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master    #角色，master</span><br><span class="line">connected_slaves:0    #没有从机</span><br><span class="line">master_replid:f71f9f3e820529cb1d83e8481168f13d59a35b0d</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>赋值三个配置文件，修改对应的信息</p><p>1、端口</p><p>2、pid名字</p><p>3、log文件</p><p>4、dump.rdb名字</p><p>修改完毕后启动三个redis服务器，可以通过进程查看信息。</p><h3 id="6-2、一主二从"><a href="#6-2、一主二从" class="headerlink" title="6.2、一主二从"></a>6.2、一主二从</h3><p>默认情况下，每台redis服务器都是主节点，我们一般情况值用配置从机就好了。</p><p>一主（79）二从（80、81）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379    # SLAVEOF  host 6379   找谁当自己的老大</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:slave               #当前角色  从机</span><br><span class="line">master_host:127.0.0.1    #可以看到主机的地址信息</span><br><span class="line">master_port:6379 #可以看到主机的端口信息</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:3</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:0</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:5d10c8af41a828c211df6393826247d9f2894398</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在主机中查看信息</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1           #多了从机的配置</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=126,lag=1      #从机信息</span><br><span class="line">master_replid:5d10c8af41a828c211df6393826247d9f2894398</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:126</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:126</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果两个都配置完了，就是有两个从机了</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2    #从机个数</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=406,lag=0    #从机1信息</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=406,lag=0    #从机2信息</span><br><span class="line">master_replid:5d10c8af41a828c211df6393826247d9f2894398</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:406</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:406</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>真实的主从配置应该在配置文件中配置，这样的话是永久的，我们这里使用命令来配置，是暂时的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">细节：</span><br><span class="line">  主机可以写，从机只能读不能写！主机中所有的信息和数据，都会自动被从机保存。</span><br><span class="line">  当主机断开连接，从机依旧连接到主机的，但是没有写操作，这个时候，主机如果回来了，从机依旧可以获取主机写入的信息。</span><br><span class="line">  如果是使用命令行，来配置的主从，从机这个时候如果重启了，就会变回主机，只有再次变为79的从机，立马就能从主机中获取所有数据。</span><br></pre></td></tr></table></figure><h3 id="6-3、哨兵模式"><a href="#6-3、哨兵模式" class="headerlink" title="6.3、哨兵模式"></a>6.3、哨兵模式</h3><p>（自动选举老大的模式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">测试</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们目前的状态是一主二从</span><br></pre></td></tr></table></figure><p>1、配置哨兵配置文件sentinel.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sentinel monitor 被监控的名称 host port &lt;quorum&gt; ，&lt;quorum&gt;:配置了多少个sentinel哨兵统一认为master主节点失联，那么这时客观上认为主节点失联了。</span></span><br><span class="line">sentinel monitor myredis 127.0.0.1 6379 1     </span><br></pre></td></tr></table></figure><p>2、启动哨兵</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# redis-sentinel wconfig/sentinel.conf </span><br><span class="line">3608:X 06 Nov 2020 16:22:58.841 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">3608:X 06 Nov 2020 16:22:58.841 # Redis version=6.0.6, bits=64, commit=00000000, modified=0, pid=3608, just started</span><br><span class="line">3608:X 06 Nov 2020 16:22:58.841 # Configuration loaded</span><br><span class="line">3608:X 06 Nov 2020 16:22:58.842 * Increased maximum number of open files to 10032 (it was originally set to 1024).</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ &#x27;&#x27;-._                                             </span><br><span class="line">      _.-``    `.  `_.  &#x27;&#x27;-._           Redis 6.0.6 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ &#x27;&#x27;-._                                   </span><br><span class="line"> (    &#x27;      ,       .-`  | `,    )     Running in sentinel mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;|     Port: 26379</span><br><span class="line"> |    `-._   `._    /     _.-&#x27;    |     PID: 3608</span><br><span class="line">  `-._    `-._  `-./  _.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |           http://redis.io        </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |                                  </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line">      `-._    `-.__.-&#x27;    _.-&#x27;                                       </span><br><span class="line">          `-._        _.-&#x27;                                           </span><br><span class="line">              `-.__.-&#x27;                                               </span><br><span class="line"></span><br><span class="line">3608:X 06 Nov 2020 16:22:58.843 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">3608:X 06 Nov 2020 16:22:58.845 # Sentinel ID is 00586711845405f9b432187d56bf6fcd567262e0</span><br><span class="line">3608:X 06 Nov 2020 16:22:58.845 # +monitor master myredis 127.0.0.1 6379 quorum 1</span><br><span class="line">3608:X 06 Nov 2020 16:22:58.846 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379</span><br><span class="line">3608:X 06 Nov 2020 16:22:58.848 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6379</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果master节点断开了，这个时候就会从从机中随机选择一个服务器！（这里面有一个投票算法）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">3608:X 06 Nov 2020 16:25:10.705 # +selected-slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6379</span><br><span class="line">3608:X 06 Nov 2020 16:25:10.705 * +failover-state-send-slaveof-noone slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6379</span><br><span class="line">3608:X 06 Nov 2020 16:25:10.775 * +failover-state-wait-promotion slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6379</span><br><span class="line">3608:X 06 Nov 2020 16:25:11.351 # +promoted-slave slave 127.0.0.1:6381 127.0.0.1 6381 @ myredis 127.0.0.1 6379</span><br><span class="line">3608:X 06 Nov 2020 16:25:11.351 # +failover-state-reconf-slaves master myredis 127.0.0.1 6379</span><br><span class="line">3608:X 06 Nov 2020 16:25:11.417 * +slave-reconf-sent slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379</span><br><span class="line">3608:X 06 Nov 2020 16:25:12.368 * +slave-reconf-inprog slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379</span><br><span class="line">3608:X 06 Nov 2020 16:25:12.368 * +slave-reconf-done slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6379</span><br><span class="line">3608:X 06 Nov 2020 16:25:12.471 # +failover-end master myredis 127.0.0.1 6379</span><br><span class="line">3608:X 06 Nov 2020 16:25:12.471 # +switch-master myredis 127.0.0.1 6379 127.0.0.1 6381</span><br><span class="line">3608:X 06 Nov 2020 16:25:12.471 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ myredis 127.0.0.1 6381</span><br><span class="line">3608:X 06 Nov 2020 16:25:12.471 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 6381</span><br><span class="line">3608:X 06 Nov 2020 16:25:42.482 # +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ myredis 127.0.0.1 6381</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=12533,lag=1</span><br><span class="line">master_replid:8dd070fc6ce1485eaabcf12c2515144c4b4c576c</span><br><span class="line">master_replid2:c1e23431f8b5ebafe4eab3671e92c05fd4ec564c</span><br><span class="line">master_repl_offset:12533</span><br><span class="line">second_repl_offset:8467</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:43</span><br><span class="line">repl_backlog_histlen:12491</span><br></pre></td></tr></table></figure><p>如果此时主机回来了，只能归并到新的主机下，成为从机。这就是哨兵模式的规则。</p><p>哨兵模式：</p><p>优点：</p><p>1、哨兵集群，基于主从复制模式，所有主从赋值优点，它全有。</p><p>2、主从可以切换，故障可以转义，系统可用性更好。</p><p>3、哨兵模式就是主从模式的升级，手动到自动。</p><p>缺点：</p><p>1、redis不好在线扩容，集群容量一旦到达上限，在线扩容就十分麻烦。</p><p>2、实现哨兵模式的配置很麻烦，里面有很多选择。</p><h2 id="七、Redis缓存穿透和雪崩"><a href="#七、Redis缓存穿透和雪崩" class="headerlink" title="七、Redis缓存穿透和雪崩"></a>七、Redis缓存穿透和雪崩</h2><p>暂定</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 安装 nacos v1.4.7</title>
      <link href="/2024/08/06/docker-%E5%AE%89%E8%A3%85-nacos-v1-4-7/"/>
      <url>/2024/08/06/docker-%E5%AE%89%E8%A3%85-nacos-v1-4-7/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-安装-nacos-v1-4-7"><a href="#docker-安装-nacos-v1-4-7" class="headerlink" title="docker 安装 nacos v1.4.7"></a>docker 安装 nacos v1.4.7</h1><h2 id="1、下载镜像"><a href="#1、下载镜像" class="headerlink" title="1、下载镜像"></a>1、下载镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos/nacos-server:v1.4.7</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="2、创建容器网络"><a href="#2、创建容器网络" class="headerlink" title="2、创建容器网络"></a>2、创建容器网络</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create nacos_network</span><br></pre></td></tr></table></figure><h2 id="3、启动容器"><a href="#3、启动容器" class="headerlink" title="3、启动容器"></a>3、启动容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nacos -d \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">--network nacos_network \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure><p>​这个命令会启动一个名为 nacos 的容器，并将其绑定到物理机的 8848 端口。同时，它还会将容器添加到之前创建的 nacos_network 容器网络中，并设置容器模式为 standalone（单机）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nacos2.2.0 -d \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">-p 9848:9848 \</span><br><span class="line">--network nacos_network \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">nacos/nacos-server:v2.2.0</span><br></pre></td></tr></table></figure><p><strong>环境：Nacos版本 2.2.0，docker镜像，centos8<br>问题描述：页面访问正常，curl -X POST正常，但是使用Java SDK集成发布失败<br>原因定位：跟踪源码，异常描述： Client not connected,current status:STARTING，客户端gRPC无法和服务端创建链接，在Nacos2.X版本中，增加了gRPC通信端口，需要由docker一并映射出来，否则就会出现无法初始化连接。<br>解决方案：在docker容器中映射9848端口</strong></p><h2 id="4、访问-Nacos-Web-控制台"><a href="#4、访问-Nacos-Web-控制台" class="headerlink" title="4、访问 Nacos Web 控制台"></a>4、访问 Nacos Web 控制台</h2><p>启动完 Nacos 容器后，就可以通过 http:&#x2F;&#x2F;虚拟机IP:8848&#x2F;nacos 访问 Nacos Web 控制台了。在控制台上，可以进行服务注册、配置管理和服务发现等操作</p><h2 id="5、配置-Nacos-数据库存储"><a href="#5、配置-Nacos-数据库存储" class="headerlink" title="5、配置 Nacos 数据库存储"></a>5、配置 Nacos 数据库存储</h2><p>​默认情况下，Nacos 使用内置的 Derby 数据库进行数据存储。虽然 Derby 是一个轻量级的数据库，但当数据量较大时，它可能会导致性能瓶颈和数据丢失的问题。因此，建议将 Nacos 数据库存储改为 MySQL 或 PostgreSQL 等外部数据库。</p><h3 id="步骤-1：安装-MySQL-数据库"><a href="#步骤-1：安装-MySQL-数据库" class="headerlink" title="步骤 1：安装 MySQL 数据库"></a>步骤 1：安装 MySQL 数据库</h3><p>​首先，需要在本地机器或其他服务器上安装 MySQL 数据库，请参照<a href="https://gitee.com/wangzhidao/document-warehouse/tree/master/%E6%96%87%E6%A1%A3/docker%E3%80%82">https://gitee.com/wangzhidao/document-warehouse/tree/master/%E6%96%87%E6%A1%A3/docker。</a></p><h3 id="步骤-2：创建-Nacos-数据库和用户"><a href="#步骤-2：创建-Nacos-数据库和用户" class="headerlink" title="步骤 2：创建 Nacos 数据库和用户"></a>步骤 2：创建 Nacos 数据库和用户</h3><p>​安装完成 MySQL 后，启动mysql，容器需要创建一个新的数据库和用户，并授予其访问权限。可以使用以下命令创建一个名为 nacos 的数据库和用户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it [容器ID] /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">CREATE DATABASE nacos DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class="line">CREATE USER &#x27;nacos&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON nacos.* TO &#x27;nacos&#x27;@&#x27;%&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">EXIT;</span><br><span class="line">EXIT;</span><br></pre></td></tr></table></figure><p>​这样，就创建了一个名为 nacos 的数据库和一个名为 nacos 的用户，并赋予它们访问权限。</p><h3 id="步骤-3：修改-Nacos-配置文件"><a href="#步骤-3：修改-Nacos-配置文件" class="headerlink" title="步骤 3：修改 Nacos 配置文件"></a>步骤 3：修改 Nacos 配置文件</h3><p>​在启动 Nacos 容器之前，需要修改配置文件以将 Nacos 数据库存储改为 MySQL。</p><p>首先，需要找到容器内部的 nacos 目录，可以使用以下命令进入容器内部：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it nacos /bin/bash</span><br><span class="line">cd /home/nacos/conf</span><br></pre></td></tr></table></figure><p>在 conf 目录下，可以找到 application.properties 文件。将该文件拷贝到本地机器上，并使用文本编辑器打开该文件。</p><p>​1 、从容器拷贝文件到宿主机</p><p>​docker cp 容器名：容器中要拷贝的文件名及其路径 要拷贝到宿主机里面对应的路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp nacos:/home/nacos/conf/application.properties /home/wzd/</span><br></pre></td></tr></table></figure><p>​2、从宿主机拷贝文件到容器</p><p>​docker cp 宿主机中要拷贝的文件名及其路径 容器名：要拷贝到容器里面对应的路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp /home/wzd/application.properties nacos:/home/nacos/conf/application.properties </span><br></pre></td></tr></table></figure><p>修改 application.properties,内容如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spring</span></span><br><span class="line"><span class="attr">server.servlet.contextPath</span>=<span class="string">$&#123;SERVER_SERVLET_CONTEXTPATH:/nacos&#125;</span></span><br><span class="line"><span class="attr">server.contextPath</span>=<span class="string">/nacos</span></span><br><span class="line"><span class="attr">server.error.include-message</span>=<span class="string">ALWAYS</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8848</span></span><br><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">nacos.cmdb.dumpTaskInterval</span>=<span class="string">3600</span></span><br><span class="line"><span class="attr">nacos.cmdb.eventTaskInterval</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">nacos.cmdb.labelTaskInterval</span>=<span class="string">300</span></span><br><span class="line"><span class="attr">nacos.cmdb.loadDataAtStart</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://192.168.130.128:3305/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line"><span class="attr">db.user</span>=<span class="string">nacos</span></span><br><span class="line"><span class="attr">db.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment">### The auth system to use, currently only &#x27;nacos&#x27; is supported:</span></span><br><span class="line"><span class="attr">nacos.core.auth.system.type</span>=<span class="string">nacos</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### The token expiration in seconds:</span></span><br><span class="line"><span class="attr">nacos.core.auth.default.token.expire.seconds</span>=<span class="string">18000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### The default token:</span></span><br><span class="line"><span class="comment"># 注意：nacos v1.4.7是开启鉴权的，所以需要在application.properties中的配置信息。</span></span><br><span class="line"><span class="comment"># 在application.properties找到nacos.core.auth.default.token.secret.key，</span></span><br><span class="line"><span class="comment"># 默认情况下nacos.core.auth.default.token.secret.key是没有值得，所以导致启动nacos后报上面的错，</span></span><br><span class="line"><span class="comment"># 根据官网说的，需要在启动nacos前给nacos.core.auth.default.token.secret.key填个256bit的token值，</span></span><br><span class="line"><span class="comment"># 也可以复制官网上给的默认token值，SecretKey012345678901234567890123456789012345678901234567890123456789，这样问题就解决了。</span></span><br><span class="line"><span class="attr">nacos.core.auth.default.token.secret.key</span>=<span class="string">SecretKey012345678901234567890123456789012345678901234567890123456789</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.</span></span><br><span class="line"><span class="attr">nacos.core.auth.caching.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">nacos.core.auth.enable.userAgentAuthWhite</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">nacos.core.auth.server.identity.key</span>=<span class="string"></span></span><br><span class="line"><span class="attr">nacos.core.auth.server.identity.value</span>=<span class="string"></span></span><br><span class="line"><span class="attr">server.tomcat.accesslog.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">server.tomcat.accesslog.pattern</span>=<span class="string">%h %l %u %t &quot;%r&quot; %s %b %D</span></span><br><span class="line"><span class="comment"># default current work dir</span></span><br><span class="line"><span class="attr">server.tomcat.basedir</span>=<span class="string">file:.</span></span><br><span class="line"><span class="comment">## spring security config</span></span><br><span class="line"><span class="comment">### turn off security</span></span><br><span class="line"><span class="attr">nacos.security.ignore.urls</span>=<span class="string">/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**</span></span><br><span class="line"><span class="comment"># metrics for elastic search</span></span><br><span class="line"><span class="attr">management.metrics.export.elastic.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">management.metrics.export.influx.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nacos.naming.distro.taskDispatchThreadCount</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">nacos.naming.distro.taskDispatchPeriod</span>=<span class="string">200</span></span><br><span class="line"><span class="attr">nacos.naming.distro.batchSyncKeyCount</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">nacos.naming.distro.initDataRatio</span>=<span class="string">0.9</span></span><br><span class="line"><span class="attr">nacos.naming.distro.syncRetryDelay</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">nacos.naming.data.warmup</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h3 id="步骤-4：重新启动-Nacos-容器"><a href="#步骤-4：重新启动-Nacos-容器" class="headerlink" title="步骤 4：重新启动 Nacos 容器"></a>步骤 4：重新启动 Nacos 容器</h3><p>修改完配置文件后，需要重新启动 Nacos 容器。可以使用以下命令停止并删除之前的容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop nacos &amp;&amp; docker rm nacos</span><br></pre></td></tr></table></figure><p>重新启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nacos -d \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">--network nacos_network \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-e SPRING_DATASOURCE_PLATFORM=mysql \</span><br><span class="line">-e MYSQL_SERVICE_HOST=192.168.130.128 \</span><br><span class="line">-e MYSQL_SERVICE_DB_NAME=nacos \</span><br><span class="line">-e MYSQL_SERVICE_USER=nacos \</span><br><span class="line">-e MYSQL_SERVICE_PASSWORD=nacos \</span><br><span class="line">nacos/nacos-server:v1.4.7</span><br></pre></td></tr></table></figure><p>访问 <a href="http://192.168.130.128:8848/nacos%EF%BC%8C%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E5%88%86%E5%88%AB%E4%B8%BAnacos%E5%92%8Cnacos,%E5%8D%B3%E5%8F%AF%E7%99%BB%E5%BD%95">http://192.168.130.128:8848/nacos，账号密码分别为nacos和nacos,即可登录</a></p><h2 id="注意：在第二次启动nacos时，一直提示数据库连接不上，经过测试，数据库连接是通的，本地数据库连接工具也能正常连接，此时，这里需要注意的是如果你直接修改了示例文件中的配置文件，需要将-号后面的-空格去掉，否则就回阴沟里帆船了。"><a href="#注意：在第二次启动nacos时，一直提示数据库连接不上，经过测试，数据库连接是通的，本地数据库连接工具也能正常连接，此时，这里需要注意的是如果你直接修改了示例文件中的配置文件，需要将-号后面的-空格去掉，否则就回阴沟里帆船了。" class="headerlink" title="注意：在第二次启动nacos时，一直提示数据库连接不上，经过测试，数据库连接是通的，本地数据库连接工具也能正常连接，此时，这里需要注意的是如果你直接修改了示例文件中的配置文件，需要将# 号后面的 空格去掉，否则就回阴沟里帆船了。"></a>注意：在第二次启动nacos时，一直提示数据库连接不上，经过测试，数据库连接是通的，本地数据库连接工具也能正常连接，此时，这里需要注意的是如果你直接修改了示例文件中的配置文件，需要将# 号后面的 空格去掉，否则就回阴沟里帆船了。</h2>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> nacos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker启动redis</title>
      <link href="/2024/08/06/docker%E5%90%AF%E5%8A%A8redis/"/>
      <url>/2024/08/06/docker%E5%90%AF%E5%8A%A8redis/</url>
      
        <content type="html"><![CDATA[<h1 id="docker启动redis"><a href="#docker启动redis" class="headerlink" title="docker启动redis"></a>docker启动redis</h1><h2 id="1、拉取redis"><a href="#1、拉取redis" class="headerlink" title="1、拉取redis"></a>1、拉取redis</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:latest</span><br></pre></td></tr></table></figure><p>当前最新版本为7.2.4</p><span id="more"></span><h2 id="2、创建挂载目录"><a href="#2、创建挂载目录" class="headerlink" title="2、创建挂载目录"></a>2、创建挂载目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/wzd/redis</span><br><span class="line">mkdir /home/wzd/redis/data</span><br></pre></td></tr></table></figure><h2 id="3、下载-redis-conf-文件"><a href="#3、下载-redis-conf-文件" class="headerlink" title="3、下载 redis.conf 文件"></a>3、下载 redis.conf 文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/redis-stable/redis.conf</span><br></pre></td></tr></table></figure><p><strong>注意：配置文件的版本需要和 redis 的版本对应，当前 redis 版本为7.2.4，配置文件的版本也应该为7.2.x,文件地址：</strong></p><p><a href="https://redis.io/docs/management/config/">https://redis.io/docs/management/config/</a></p><h2 id="4、设置权限"><a href="#4、设置权限" class="headerlink" title="4、设置权限"></a>4、设置权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 redis.conf</span><br></pre></td></tr></table></figure><h2 id="5、设置默认配置信息"><a href="#5、设置默认配置信息" class="headerlink" title="5、设置默认配置信息"></a>5、设置默认配置信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /home/wzd/redis/redis.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1 # 这行要注释掉，解除本地连接限制</span><br><span class="line">protected-mode no # 默认yes，如果设置为yes，则只允许在本机的回环连接，其他机器无法连接。</span><br><span class="line">daemonize no # 默认no 为不守护进程模式，docker部署不需要改为yes，docker run -d本身就是后台启动，不然会冲突</span><br><span class="line">requirepass 123456 # 设置密码</span><br><span class="line">appendonly yes # 持久化</span><br></pre></td></tr></table></figure><h2 id="6、docker-启动-redis"><a href="#6、docker-启动-redis" class="headerlink" title="6、docker 启动 redis"></a>6、docker 启动 redis</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-itd \</span><br><span class="line">--name redis7.2.4 \</span><br><span class="line">--privileged=true \</span><br><span class="line">-p 6379:6379 \</span><br><span class="line">-v /home/wzd/redis/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /home/wzd/redis/data:/data \</span><br><span class="line">redis:latest \</span><br><span class="line">redis-server /etc/redis/redis.conf \</span><br><span class="line">--appendonly yes \</span><br><span class="line">--requirepass 123456 </span><br></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run</span><br><span class="line">-itd </span><br><span class="line">        -d                                         在后台运行容器，并且打印容器id。</span><br><span class="line">        -i                                         即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用。</span><br><span class="line">        -t                                         分配一个伪tty，一般与 -i 连用。</span><br><span class="line">--name redis7.2.4                                    容器名字</span><br><span class="line">--privileged=true                                    容器内的root拥有真正root权限，否则容器内root只是外部普通用户权限</span><br><span class="line">-p 6379:6379                                         把容器内的6379端口映射到宿主机6379端口</span><br><span class="line">-v /home/wzd/redis/redis.conf:/etc/redis/redis.conf  把宿主机配置好的redis.conf放到容器内的这个位置中(文件)</span><br><span class="line">-v /home/wzd/redis/data:/data                        把redis持久化的数据在宿主机内显示，做数据备份</span><br><span class="line">redis:latest                                         镜像名字</span><br><span class="line">redis-server /etc/redis/redis.conf                   这个是关键配置，让redis不是无配置启动，而是按照这个redis.conf的 配置启动</span><br><span class="line">--appendonly yes                                     开启数据持久化</span><br><span class="line">--requirepass 123456                                 密码</span><br></pre></td></tr></table></figure><p><strong>注意：启动 redis 需要添加 –privileged&#x3D;true 命令，否则无法启动</strong></p><h2 id="7、在-docker-中打开-redis-客户端"><a href="#7、在-docker-中打开-redis-客户端" class="headerlink" title="7、在 docker 中打开 redis 客户端"></a>7、在 docker 中打开 redis 客户端</h2><h3 id="1、首先交互方式进入-redis-容器"><a href="#1、首先交互方式进入-redis-容器" class="headerlink" title="1、首先交互方式进入 redis 容器"></a>1、首先交互方式进入 redis 容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it [容器ID] /bin/bash</span><br></pre></td></tr></table></figure><h3 id="2、随后运行客户端"><a href="#2、随后运行客户端" class="headerlink" title="2、随后运行客户端"></a>2、随后运行客户端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><h3 id="3、执行客户端命令"><a href="#3、执行客户端命令" class="headerlink" title="3、执行客户端命令"></a>3、执行客户端命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get keys</span><br><span class="line">(error) NOAUTH Authentication required.</span><br></pre></td></tr></table></figure><p>出现该情况，输入密码即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auth &#x27;123456&#x27;</span><br><span class="line">auth 123456</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">两种命令都可以</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装nginx</title>
      <link href="/2024/08/06/docker%E5%AE%89%E8%A3%85nginx/"/>
      <url>/2024/08/06/docker%E5%AE%89%E8%A3%85nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="docker安装nignx"><a href="#docker安装nignx" class="headerlink" title="docker安装nignx"></a>docker安装nignx</h2><h1 id="1、拉取nginx镜像"><a href="#1、拉取nginx镜像" class="headerlink" title="1、拉取nginx镜像"></a>1、拉取nginx镜像</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx:latest</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="2、创建Nginx配置文件"><a href="#2、创建Nginx配置文件" class="headerlink" title="2、创建Nginx配置文件"></a>2、创建Nginx配置文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">启动前需要先创建Nginx外部挂载的配置文件（ /home/wzd/nginx/conf/nginx.conf）</span><br><span class="line">之所以要先创建 , 是因为Nginx本身容器只存在/etc/nginx 目录 , 本身就不创建 nginx.conf 文件</span><br><span class="line">当服务器和容器都不存在 nginx.conf 文件时, 执行启动命令的时候 docker会将nginx.conf 作为目录创建 , 这并不是我们想要的结果 。</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建挂载目录</span></span><br><span class="line">mkdir -p /home/wzd/nginx/conf</span><br><span class="line">mkdir -p /home/wzd/nginx/log</span><br><span class="line">mkdir -p /home/wzd/nginx/html</span><br></pre></td></tr></table></figure><h1 id="3、创建容器并运行"><a href="#3、创建容器并运行" class="headerlink" title="3、创建容器并运行"></a>3、创建容器并运行</h1><p>​Docker 创建Nginx容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成容器</span></span><br><span class="line">docker run --name nginx -p 9001:80 -d nginx</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">容器中的nginx.conf文件和conf.d文件夹复制到宿主机</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将容器nginx.conf文件复制到宿主机</span></span><br><span class="line">docker cp nginx:/etc/nginx/nginx.conf /home/wzd/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将容器conf.d文件夹下内容复制到宿主机</span></span><br><span class="line">docker cp nginx:/etc/nginx/conf.d /home/wzd/nginx/conf/conf.d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将容器中的html文件夹复制到宿主机</span></span><br><span class="line">docker cp nginx:/usr/share/nginx/html /home/wzd/nginx/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接执行docker <span class="built_in">rm</span> nginx或者以容器<span class="built_in">id</span>方式关闭容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到nginx对应的容器<span class="built_in">id</span></span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭该容器</span></span><br><span class="line">docker stop nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除该容器</span></span><br><span class="line">docker rm nginx</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除正在运行的nginx容器</span></span><br><span class="line">docker rm -f nginx</span><br></pre></td></tr></table></figure><h1 id="4、重新启动容器"><a href="#4、重新启动容器" class="headerlink" title="4、重新启动容器"></a>4、重新启动容器</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 9002:80 \</span><br><span class="line">--name nginx \</span><br><span class="line">-v /home/wzd/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /home/wzd/nginx/conf/conf.d:/etc/nginx/conf.d \</span><br><span class="line">-v /home/wzd/nginx/log:/var/log/nginx \</span><br><span class="line">-v /home/wzd/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-d nginx:latest</span><br></pre></td></tr></table></figure><p>参数注释：</p><table><thead><tr><th align="left">命令</th><th>描述</th></tr></thead><tbody><tr><td align="left">–name nginx</td><td>启动容器的名字</td></tr><tr><td align="left">-d</td><td>后台运行</td></tr><tr><td align="left">-p 9002:80</td><td>将容器的 80(后面那个) 端口映射到主机的 9002(前面那个) 端口</td></tr><tr><td align="left">-v &#x2F;home&#x2F;nginx&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</td><td>挂载nginx.conf配置文件</td></tr><tr><td align="left">-v &#x2F;home&#x2F;nginx&#x2F;conf&#x2F;conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d</td><td>挂载nginx配置文件</td></tr><tr><td align="left">-v &#x2F;home&#x2F;nginx&#x2F;log:&#x2F;var&#x2F;log&#x2F;nginx</td><td>挂载nginx日志文件</td></tr><tr><td align="left">-v &#x2F;home&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</td><td>挂载nginx内容</td></tr><tr><td align="left">nginx:latest</td><td>本地运行的版本</td></tr><tr><td align="left">\</td><td>shell 命令换行</td></tr></tbody></table><p>​<strong>注意：-p 9002:80 ，将 容器的80端口映射到 docker 所在服务器（虚拟机）的 9002 端口，此时虚拟机的9002端口并没有在防火墙中开启，但是虚拟机外的网络依旧能访问到9002端口,是因为docker 容器创建时，如果指定了容器映射的宿主机端口（9002），docker就会在 iptables 的规则链中加上自己容器对外提供服务所需的规则链，所以docker 容器跑的服务，虚拟机所在的主机（本地电脑）可以访问到！</strong></p><p>单行模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run \ </span><br><span class="line">-p 9002:80 \</span><br><span class="line">--name nginx \</span><br><span class="line">-v /home/wzd/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /home/wzd/nginx/conf/conf.d:/etc/nginx/conf.d \</span><br><span class="line">-v /home/wzd/nginx/log:/var/log/nginx \</span><br><span class="line">-v /home/wzd/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-d nginx:latest</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装Mysql 8.0.11</title>
      <link href="/2024/08/06/docker%E5%AE%89%E8%A3%85Mysql-8-0-11/"/>
      <url>/2024/08/06/docker%E5%AE%89%E8%A3%85Mysql-8-0-11/</url>
      
        <content type="html"><![CDATA[<h1 id="docker安装Mysql-8-0-11"><a href="#docker安装Mysql-8-0-11" class="headerlink" title="docker安装Mysql 8.0.11"></a>docker安装Mysql 8.0.11</h1><h2 id="1、下载镜像"><a href="#1、下载镜像" class="headerlink" title="1、下载镜像"></a>1、下载镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:8.0.11</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="2、创建挂载目录"><a href="#2、创建挂载目录" class="headerlink" title="2、创建挂载目录"></a>2、创建挂载目录</h2><p>​使用 -p 创建多级目录，即  &#x2F;home目录下创建 mysql 目录， mysql 目录下又创建 log 、data 、conf 三个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/mountDirectory/mysql-8.0.1/logs</span><br><span class="line">mkdir -p /home/mountDirectory/mysql-8.0.1/data</span><br><span class="line">mkdir -p /home/mountDirectory/mysql-8.0.1/conf</span><br></pre></td></tr></table></figure><h2 id="3、创建my-cnf-配置文件"><a href="#3、创建my-cnf-配置文件" class="headerlink" title="3、创建my.cnf 配置文件"></a>3、创建my.cnf 配置文件</h2><p>​MySQL默认配置文件 &#x2F;etc&#x2F;my.cnf 末尾中有这么一行：!includedir &#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F; ，意思是，在 &#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F; 目录下新建自定义的配置文件 my.cnf也会被读取到，而且还是优先读取的（Docker Hub中的MySQL教程文档）,进入 &#x2F;etc目录下创建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch my.cnf</span><br></pre></td></tr></table></figure><p>将一下内容写入到 my.cnf 配置文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">init-connect=&quot;SET collation_connection=utf8mb4_0900_ai_ci&quot;</span><br><span class="line">init_connect=&quot;SET NAMES utf8mb4&quot;</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mysql不区分表名大小写</span></span><br><span class="line">lower_case_table_names=1</span><br></pre></td></tr></table></figure><h2 id="4、创建容器"><a href="#4、创建容器" class="headerlink" title="4、创建容器"></a>4、创建容器</h2><p>将配置选项作为标志传递给mysqld，MYSQL_ROOT_PASSWORD 指定密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql8 \</span><br><span class="line">-v /home/mountDirectory/mysql-8.0.11/logs:/var/log/mysql \</span><br><span class="line">-v /home/mountDirectory/mysql-8.0.11/data:/var/lib/mysql \</span><br><span class="line">-v /home/mountDirectory/mysql-8.0.11/conf:/etc/mysql/conf.d \</span><br><span class="line">-p 3305:3306 \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--restart=always \</span><br><span class="line">-d mysql:8.0.11 \</span><br><span class="line">--init-connect=&quot;SET collation_connection=utf8mb4_0900_ai_ci&quot; \</span><br><span class="line">--init-connect=&quot;SET NAMES utf8mb4&quot; \</span><br><span class="line">--skip-character-set-client-handshake</span><br></pre></td></tr></table></figure><h2 id="5、使用-DataGrip-连接"><a href="#5、使用-DataGrip-连接" class="headerlink" title="5、使用 DataGrip 连接"></a>5、使用 DataGrip 连接</h2><p>连接 url 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```mysql</span><br><span class="line">jdbc:mysql://ip地址:端口号/mysql?useSSL=no&amp;allowPublicKeyRetrieval=true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 安装 zookeeper</title>
      <link href="/2024/08/06/docker-%E5%AE%89%E8%A3%85-zookeeper/"/>
      <url>/2024/08/06/docker-%E5%AE%89%E8%A3%85-zookeeper/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-安装-zookeeper"><a href="#docker-安装-zookeeper" class="headerlink" title="docker 安装 zookeeper"></a>docker 安装 zookeeper</h1><h2 id="1、下载镜像"><a href="#1、下载镜像" class="headerlink" title="1、下载镜像"></a>1、下载镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull zookeeper:3.9.1</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="2、配置挂载目录"><a href="#2、配置挂载目录" class="headerlink" title="2、配置挂载目录"></a>2、配置挂载目录</h2><p>​在  &#x2F;home&#x2F;mountDirectory&#x2F; 目录下新增 文件夹 zookeeper，在  zookeeper 目录下新增 data 目录。</p><h2 id="3、启动容器"><a href="#3、启动容器" class="headerlink" title="3、启动容器"></a>3、启动容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -e TZ=&quot;Asia/Shanghai&quot; -p 2181:2181 -v /home/mountDirectory/zookeeper/data:/data --name zookeeper --restart always zookeeper:3.9.1</span><br></pre></td></tr></table></figure><p>  参数注释：</p><table><thead><tr><th>参数</th><th>释义</th></tr></thead><tbody><tr><td>-e TZ&#x3D;”Asia&#x2F;Shanghai”</td><td>指定上海时区</td></tr><tr><td>-d</td><td>表示在一直在后台运行容器</td></tr><tr><td>-p 2181:2181</td><td>对端口进行映射，将本地2181端口映射到容器内部的2181端口</td></tr><tr><td>–name</td><td>设置创建的容器名称</td></tr><tr><td>-v</td><td>将本地目录(文件)挂载到容器指定目录</td></tr><tr><td>–restart always</td><td>#始终重新启动zookeeper</td></tr></tbody></table><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it zookeeper /bin/bash</span><br></pre></td></tr></table></figure><p>进入容器内，然后进入 bin目录，使用 .&#x2F;zkCli.sh 命令启动客户端。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos8防火墙相关指令</title>
      <link href="/2024/08/06/centos8%E9%98%B2%E7%81%AB%E5%A2%99%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4/"/>
      <url>/2024/08/06/centos8%E9%98%B2%E7%81%AB%E5%A2%99%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOs8防火墙操作命令"><a href="#CentOs8防火墙操作命令" class="headerlink" title="CentOs8防火墙操作命令"></a>CentOs8防火墙操作命令</h1><h3 id="查看防火墙某个端口是否开放"><a href="#查看防火墙某个端口是否开放" class="headerlink" title="查看防火墙某个端口是否开放"></a>查看防火墙某个端口是否开放</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --query-port=6379/tcp</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="开放防火墙端口"><a href="#开放防火墙端口" class="headerlink" title="开放防火墙端口"></a>开放防火墙端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br></pre></td></tr></table></figure><h3 id="关闭端口"><a href="#关闭端口" class="headerlink" title="关闭端口"></a>关闭端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --remove-port=6379/tcp --permanent</span><br></pre></td></tr></table></figure><h3 id="重新载入配置，让开放或关闭的端口配置生效"><a href="#重新载入配置，让开放或关闭的端口配置生效" class="headerlink" title="重新载入配置，让开放或关闭的端口配置生效"></a>重新载入配置，让开放或关闭的端口配置生效</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h3 id="打开防火墙"><a href="#打开防火墙" class="headerlink" title="打开防火墙"></a>打开防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure><h3 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><h3 id="开放一段端口"><a href="#开放一段端口" class="headerlink" title="开放一段端口"></a>开放一段端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=40000-45000/tcp --permanent</span><br></pre></td></tr></table></figure><h3 id="查看开放的端口列表"><a href="#查看开放的端口列表" class="headerlink" title="查看开放的端口列表"></a>查看开放的端口列表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centos8 </category>
          
          <category> firewall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos8 </tag>
            
            <tag> firewall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nacos集群部署</title>
      <link href="/2024/07/27/nacos%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
      <url>/2024/07/27/nacos%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<pre><code>本文主要介绍在Centos8 系统中部署 nacos2.2.1集群。</code></pre><span id="more"></span><h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><h2 id="1-1、版本说明"><a href="#1-1、版本说明" class="headerlink" title="1.1、版本说明"></a>1.1、版本说明</h2><table><thead><tr><th>组件</th><th>版本</th><th>备注</th></tr></thead><tbody><tr><td>Centos</td><td>CentOS Linux release 8.4.2105</td><td>请自行搜索安装</td></tr><tr><td>Nacos</td><td>2.2.1</td><td></td></tr><tr><td>Mysql</td><td>8.0.37</td><td>请自行搜索安装</td></tr><tr><td>openjdk</td><td>1.8.0_312-b07</td><td>请自行搜索配置</td></tr></tbody></table><h2 id="1-2、服务部署规划"><a href="#1-2、服务部署规划" class="headerlink" title="1.2、服务部署规划"></a>1.2、服务部署规划</h2><table><thead><tr><th>主机名</th><th>IP</th><th>部署端口</th><th>路径</th><th>说明</th></tr></thead><tbody><tr><td>Centos8</td><td>173.16.4.130</td><td>8848</td><td>&#x2F;opt&#x2F;nacos</td><td>nacos1</td></tr><tr><td>Centos8(2)</td><td>173.16.4.131</td><td>8848</td><td>&#x2F;opt&#x2F;nacos</td><td>nacos2</td></tr><tr><td>Centos8(3)</td><td>173.16.4.132</td><td>8848</td><td>&#x2F;opt&#x2F;nacos</td><td>Nacos3</td></tr><tr><td>Mac</td><td>127.0.0.1</td><td>3305</td><td>～</td><td>本人在mac电脑中使用docker部署了mysql，端口为3305</td></tr></tbody></table><h1 id="二、部署安装"><a href="#二、部署安装" class="headerlink" title="二、部署安装"></a>二、部署安装</h1><h2 id="2-1、下载并解压"><a href="#2-1、下载并解压" class="headerlink" title="2.1、下载并解压"></a>2.1、下载并解压</h2><p>​下载 nacos-server-2.2.1.tar.gz ，将压缩包拷贝到服务器中并解压。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 /]# cd /opt/nacos/</span><br><span class="line">[root@centos8 nacos]# ls</span><br><span class="line">nacos-server-2.2.1.tar.gz</span><br><span class="line">[root@centos8 nacos]# tar -zxvf nacos-server-2.2.1.tar.gz</span><br><span class="line">[root@centos8 nacos]# ls</span><br><span class="line">[root@centos8 nacos]# nacos  nacos-server-2.2.1.tar.gz</span><br></pre></td></tr></table></figure><h2 id="2-2、配置"><a href="#2-2、配置" class="headerlink" title="2.2、配置"></a>2.2、配置</h2><p>​<strong>集群配置</strong></p><p>​进入 nacos 的 conf 目录，将 cluster.conf.example 拷贝一份，并对 cluster.conf 进行编辑。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 nacos]# cd nacos/conf/</span><br><span class="line">[root@centos8 conf]# cp cluster.conf.example cluster.conf</span><br><span class="line">[root@centos8 conf]# ll</span><br><span class="line">-rw-r--r--. 1  502 games  1224 3月  13 2023 1.4.0-ipv6_support-update.sql</span><br><span class="line">-rw-r--r--. 1  502 games 10900 7月  27 21:46 application.properties</span><br><span class="line">-rw-r--r--. 1  502 games  9435 3月  17 2023 application.properties.example</span><br><span class="line">-rw-r--r--. 1 root root     79 7月  27 21:47 cluster.conf</span><br><span class="line">-rw-r--r--. 1  502 games   670 3月  17 2023 cluster.conf.example</span><br><span class="line">-rw-r--r--. 1  502 games  8939 3月  17 2023 derby-schema.sql</span><br><span class="line">-rw-r--r--. 1  502 games 10825 3月  17 2023 mysql-schema.sql</span><br><span class="line">-rw-r--r--. 1  502 games 31156 3月  17 2023 nacos-logback.xml</span><br><span class="line">[root@centos8 conf]# vim cluster.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​修改内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2024-07-27T21:47:11.817</span></span><br><span class="line">173.16.4.130:8848</span><br><span class="line">173.16.4.131:8848</span><br><span class="line">173.16.4.132:8848</span><br></pre></td></tr></table></figure><p>​ 这里是我们在服务器上运行的三台 nacos 服务实力，IP 地址就是 步骤 1.2 的三个地址。端口号为步骤 1.2 的三个端口号。</p><p>​<strong>文件属性配置</strong></p><p>​文件属性配置主要修改 application.properties 文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 conf]# vim application.properties</span><br></pre></td></tr></table></figure><p>​数据源配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#*************** Config Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If use MySQL as datasource:</span></span><br><span class="line"><span class="comment">### Deprecated configuration property, it is recommended to use `spring.sql.init.platform` replaced.</span></span><br><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment">#spring.sql.init.platform=mysql</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Count of DB:</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Connect URL of DB:</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://192.168.15.89:3305/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Connection pool configuration: hikariCP</span></span><br><span class="line"><span class="attr">db.pool.config.connectionTimeout</span>=<span class="string">30000</span></span><br><span class="line"><span class="attr">db.pool.config.validationTimeout</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">db.pool.config.maximumPoolSize</span>=<span class="string">20</span></span><br><span class="line"><span class="attr">db.pool.config.minimumIdle</span>=<span class="string">2</span></span><br></pre></td></tr></table></figure><p>​鉴权配置：</p><p>​nacos 提供鉴权实现，我们需要开启鉴权，同时自定义用于生成 JWT 令牌的密钥。1.4.1 版本开始，nacos添加服务身份识别功能，用户可以自己配置服务端的 identity， 不再使用 userAgent 作为服务端请求的判断标准。</p><p>​配置信息如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### The auth system to use, currently only &#x27;nacos&#x27; and &#x27;ldap&#x27; is supported:</span></span><br><span class="line"><span class="attr">nacos.core.auth.system.type</span>=<span class="string">nacos</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### If turn on auth system:</span></span><br><span class="line"><span class="attr">nacos.core.auth.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Since 1.4.1, worked when nacos.core.auth.enabled=true and nacos.core.auth.enable.userAgentAuthWhite=false.</span></span><br><span class="line"><span class="comment">### The two properties is the white list for auth and used by identity the request from other server.</span></span><br><span class="line"><span class="attr">nacos.core.auth.server.identity.key</span>=<span class="string">nacos</span></span><br><span class="line"><span class="attr">nacos.core.auth.server.identity.value</span>=<span class="string">nacos</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### The default token (Base64 String):</span></span><br><span class="line"><span class="attr">nacos.core.auth.plugin.nacos.token.secret.key</span>=<span class="string">U2VjcmV0S2V5aGFma3NhZmtkYWtma2FrZmFranNkZml3dWJzZGZhc2RmYXNkZiA=</span></span><br></pre></td></tr></table></figure><p>​<strong>注意：集群中的所有配置文件都要配置相同的 server.identity 信息，否则可能导致服务端之间数据不一致或无法删除实例等问题。具具体可以参考 <a href="https://nacos.io/zh-cn/docs/v2/guide/user/auth.html">https://nacos.io/zh-cn/docs/v2/guide/user/auth.html</a> 开启服务身份识别功能模块。</strong> </p><p>​启动之前防火墙需要放开端口 8848，8849 和 9848。</p><h2 id="2-3、启动"><a href="#2-3、启动" class="headerlink" title="2.3、启动"></a>2.3、启动</h2><p>​进入 bin 目录，启动nacos。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 bin]# ./startup.sh </span><br><span class="line">/usr/lib/jvm/java-1.8.0-openjdk/bin/java -Djava.ext.dirs=/usr/lib/jvm/java-1.8.0-openjdk/jre/lib/ext:/usr/lib/jvm/java-1.8.0-openjdk/lib/ext  -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/nacos/nacos/logs/java_heapdump.hprof -XX:-UseLargePages -Dnacos.member.list= -Xloggc:/opt/nacos/nacos/logs/nacos_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M -Dloader.path=/opt/nacos/nacos/plugins,/opt/nacos/nacos/plugins/health,/opt/nacos/nacos/plugins/cmdb,/opt/nacos/nacos/plugins/selector -Dnacos.home=/opt/nacos/nacos -jar /opt/nacos/nacos/target/nacos-server.jar  --spring.config.additional-location=file:/opt/nacos/nacos/conf/ --logging.config=/opt/nacos/nacos/conf/nacos-logback.xml --server.max-http-header-size=524288</span><br><span class="line">nacos is starting with cluster</span><br><span class="line">nacos is starting，you can check the /opt/nacos/nacos/logs/start.out</span><br></pre></td></tr></table></figure><p>查看启动日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 logs]# cd /opt/nacos/nacos/logs/</span><br><span class="line">[root@centos8 logs]# tail -2000f start.out </span><br><span class="line">/usr/lib/jvm/java-1.8.0-openjdk/bin/java -Djava.ext.dirs=/usr/lib/jvm/java-1.8.0-openjdk/jre/lib/ext:/usr/lib/jvm/java-1.8.0-openjdk/lib/ext  -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/nacos/nacos/logs/java_heapdump.hprof -XX:-UseLargePages -Dnacos.member.list= -Xloggc:/opt/nacos/nacos/logs/nacos_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M -Dloader.path=/opt/nacos/nacos/plugins,/opt/nacos/nacos/plugins/health,/opt/nacos/nacos/plugins/cmdb,/opt/nacos/nacos/plugins/selector -Dnacos.home=/opt/nacos/nacos -jar /opt/nacos/nacos/target/nacos-server.jar  --spring.config.additional-location=file:/opt/nacos/nacos/conf/ --logging.config=/opt/nacos/nacos/conf/nacos-logback.xml --server.max-http-header-size=524288</span><br><span class="line"></span><br><span class="line">         ,--.</span><br><span class="line">       ,--.&#x27;|</span><br><span class="line">   ,--,:  : |                                           Nacos 2.2.1</span><br><span class="line">,`--.&#x27;`|  &#x27; :                       ,---.               Running in cluster mode, All function modules</span><br><span class="line">|   :  :  | |                      &#x27;   ,&#x27;\   .--.--.    Port: 8848</span><br><span class="line">:   |   \ | :  ,--.--.     ,---.  /   /   | /  /    &#x27;   Pid: 7398</span><br><span class="line">|   : &#x27;  &#x27;; | /       \   /     \.   ; ,. :|  :  /`./   Console: http://173.16.4.130:8848/nacos/index.html</span><br><span class="line">&#x27;   &#x27; ;.    ;.--.  .-. | /    / &#x27;&#x27;   | |: :|  :  ;_</span><br><span class="line">|   | | \   | \__\/: . ..    &#x27; / &#x27;   | .; : \  \    `.      https://nacos.io</span><br><span class="line">&#x27;   : |  ; .&#x27; ,&quot; .--.; |&#x27;   ; :__|   :    |  `----.   \</span><br><span class="line">|   | &#x27;`--&#x27;  /  /  ,.  |&#x27;   | &#x27;.&#x27;|\   \  /  /  /`--&#x27;  /</span><br><span class="line">&#x27;   : |     ;  :   .&#x27;   \   :    : `----&#x27;  &#x27;--&#x27;.     /</span><br><span class="line">;   |.&#x27;     |  ,     .-./\   \  /            `--&#x27;---&#x27;</span><br><span class="line">&#x27;---&#x27;        `--`---&#x27;     `----&#x27;</span><br><span class="line"></span><br><span class="line">2024-07-27 23:10:56,152 INFO The server IP list of Nacos is [173.16.4.130:8848, 173.16.4.131:8848, 173.16.4.132:8848]</span><br><span class="line"></span><br><span class="line">2024-07-27 23:10:57,153 INFO Nacos is starting...</span><br></pre></td></tr></table></figure><p>​nacos 以集群方式启动，登陆控制台 （<a href="http://173.16.4.130:8848/nacos/index.htm%EF%BC%89%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE">http://173.16.4.130:8848/nacos/index.htm），如下图</a>:</p><p><img src="/2024/07/27/nacos%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/nacos.jpg"></p><p>按照上述操作启动其他两台 nacos，当启动其他的 nacos 服务时，节点状态会从 DOWN 变为 UP。</p><h1 id="三、增加systemd管理"><a href="#三、增加systemd管理" class="headerlink" title="三、增加systemd管理"></a>三、增加systemd管理</h1><h2 id="3-1、-编写启动文件"><a href="#3-1、-编写启动文件" class="headerlink" title="3.1、 编写启动文件"></a>3.1、 编写启动文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]# vim /etc/systemd/system/nacos.service</span><br></pre></td></tr></table></figure><h2 id="3-2、在文件中写入以下内容"><a href="#3-2、在文件中写入以下内容" class="headerlink" title="3.2、在文件中写入以下内容"></a>3.2、在文件中写入以下内容</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nacos</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/opt/nacos/nacos/bin/startup.sh</span><br><span class="line">ExecReload=/opt/nacos/bacos/bin/shutdown.sh</span><br><span class="line">ExecStop=/opt/nacos/bin/shutdown.sh</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>​其中 &#x2F;opt&#x2F;nacos 为本机按照的 nacos 文件路径，-m standalone，表示作为单机启动，不加代表以集群启动，此处以集群启动。</p><h2 id="3-3、设置开机启动"><a href="#3-3、设置开机启动" class="headerlink" title="3.3、设置开机启动"></a>3.3、设置开机启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启守护现场，进行文件生效配置</span></span><br><span class="line">[root@centos8 ~]# systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置为开机启动</span></span><br><span class="line">[root@centos8 ~]# systemctl enable nacos.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 nacos 服务</span></span><br><span class="line">[root@centos8 ~]# systemctl start nacos.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止 nacos 服务</span></span><br><span class="line">[root@centos8 ~]# systemctl stop nacos.service  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启服务器</span></span><br><span class="line">[root@centos8 ~]# reboot </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 nacos 状态</span></span><br><span class="line">[root@centos8 ~]# systemctl status nacos.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nacos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nacos </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper集群搭建</title>
      <link href="/2024/07/25/zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/07/25/zookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>本文主要讲述如何在 centos8 上搭建 zookeeper 集群。centos8 基础知识自行搜索，本文不过多赘述。</p><h1 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h1><p>​配置 idk环境，本文为 jdk1.8，下载 SSH 连接工具，本文使用 tabby。准备 三台 服务器，也可以一台，在同时启动三个 zookeeper（伪集群）。本文用三台服务器作为案例，ip 地址分别为 173.16.4.130，173.16.4.131，173.16.4.131。</p><span id="more"></span><h1 id="2、下载-zookeeper并解压"><a href="#2、下载-zookeeper并解压" class="headerlink" title="2、下载 zookeeper并解压"></a>2、下载 zookeeper并解压</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dlcdn.apache.org/zookeeper/zookeeper-3.8.4/apache-zookeeper-3.8.4-bin.tar.gz</span><br></pre></td></tr></table></figure><h1 id="3、解压"><a href="#3、解压" class="headerlink" title="3、解压"></a>3、解压</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-zookeeper-3.8.4-bin.tar.gzz  -c /opt/zookeeper</span><br><span class="line">cd /opt/zookeeper/</span><br><span class="line">mv apache-zookeeper-3.8.4-bin apache-zookeeper-3.8.4</span><br></pre></td></tr></table></figure><h1 id="4、zookeeper-配置（重要）"><a href="#4、zookeeper-配置（重要）" class="headerlink" title="4、zookeeper 配置（重要）"></a>4、zookeeper 配置（重要）</h1><h2 id="4-1、进入-conf-目录，新增-data-和-log-文件夹"><a href="#4-1、进入-conf-目录，新增-data-和-log-文件夹" class="headerlink" title="4.1、进入 conf 目录，新增 data 和 log 文件夹"></a>4.1、进入 conf 目录，新增 data 和 log 文件夹</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/zookeeper/apache-zookeeper-3.8.4/conf</span><br><span class="line">mkdir data</span><br><span class="line">mkdir log</span><br><span class="line">ls</span><br><span class="line">configuration.xsl  data log logback.xml zoo_sample.cfg</span><br></pre></td></tr></table></figure><h2 id="4-2、配置-zookeeper-配置文件"><a href="#4-2、配置-zookeeper-配置文件" class="headerlink" title="4.2、配置 zookeeper 配置文件"></a>4.2、配置 zookeeper 配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line">ls</span><br><span class="line">configuration.xsl  data  logback.xml  zoo.cfg  zoo_sample.cfg</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim zoo.cfg</span><br></pre></td></tr></table></figure><p>将文件配置成如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The number of milliseconds of each tick</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The number of ticks that the initial</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">synchronization phase can take</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The number of ticks that can pass between</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sending a request and getting an acknowledgement</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the directory <span class="built_in">where</span> the snapshot is stored.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">do</span> not use /tmp <span class="keyword">for</span> storage, /tmp here is just</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">example sakes.</span></span><br><span class="line">dataDir=/opt/zookeeper/apache-zookeeper-3.8.4/conf/data</span><br><span class="line">dataLogDir=/opt/zookeeper/apache-zookeeper-3.8.4/conf/log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the port at <span class="built_in">which</span> the clients will connect</span></span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the maximum number of client connections.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">increase this <span class="keyword">if</span> you need to handle more clients</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">maxClientCnxns=60</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Be sure to read the maintenance section of the</span></span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">administrator guide before turning on autopurge.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># https://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># The number of snapshots to retain in dataDir</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">autopurge.snapRetainCount=3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Purge task interval <span class="keyword">in</span> hours</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set to <span class="string">&quot;0&quot;</span> to <span class="built_in">disable</span> auto purge feature</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">autopurge.purgeInterval=1</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Metrics Providers</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># https://prometheus.io Metrics Exporter</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">metricsProvider.httpHost=0.0.0.0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">metricsProvider.httpPort=7000</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">metricsProvider.exportJvmInfo=<span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加如下内容 server.x=A:B:C</span></span><br><span class="line">server.1=173.16.4.130:2888:3888</span><br><span class="line">server.2=173.16.4.131:2888:3888</span><br><span class="line">server.3=173.16.4.132:2888:3888</span><br></pre></td></tr></table></figure><p>参数介绍：</p><table><thead><tr><th>属性</th><th>注释</th></tr></thead><tbody><tr><td>tickTime</td><td>在运行过程中，Leader负责与ZK集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。如果L发出心跳包在syncLimit之后，还没有从F那里收到响应，那么就认为这个F已经不在线了。注意：不要把这个参数设置得过大，否则可能会掩盖一些问题。</td></tr><tr><td>initLimit</td><td>Follower在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。Leader允许 Follower 在 <strong>initLimit</strong> 时间内完成这个工作。通常情况下，我们不用太在意这个参数的设置。如果ZK集群的数据量确实很大了，F在启动的时候，从Leader上同步数据的时间也会相应变长，因此在这种情况下，有必要适当调大这个参数了。</td></tr><tr><td>syncLimit</td><td>有 5 （可配置）台机器可以同时运转。</td></tr><tr><td>dataDir</td><td>4.1 步骤中新增的 data 的路径。存储快照文件snapshot的目录。默认情况下，事务日志也会存储在这里。建议同时配置参数dataLogDir, 事务日志的写性能直接影响zk性能。</td></tr><tr><td>clientPort</td><td>客户端连接server的端口，即对外服务端口，一般设置为2181。</td></tr><tr><td>server.1&#x3D;173.16.4.130:2888:3888</td><td>第一台服务器 IP 地址</td></tr><tr><td>server.2&#x3D;173.16.4.131:2888:3888</td><td>第二台服务器 IP 地址</td></tr><tr><td>server.3&#x3D;173.16.4.132:2888:3888</td><td>第三台服务器 IP 地址</td></tr><tr><td>server.x&#x3D;[hostname]:nnnnn[:nnnnn]</td><td>这里的x是一个数字，与myid文件中的id是一致的。右边可以配置两个端口，第一个端口用于F和L之间的数据同步和其它通信，第二个端口用于Leader选举过程中投票通信。</td></tr></tbody></table><p>​<strong>注意： 2888 是Zookeeper 集群中服务器之间通信的端口，用于数据同步。3888 是Zookeeper 选举的端口，用于集群领导者选举时的通信。Zookeeper 集群中的 2888 和 3888 端口是可以修改的。你可以在 <code>zoo.cfg</code> 配置文件中更改这些端口，只需要确保所有节点的配置文件中的端口设置保持一致，并且新的端口没有被其他应用程序占用。</strong></p><p>​确保每个节点（每台服务器）上的防火墙允许 Zookeeper 使用的端口（2181, 2888, 3888）。</p><p>​开放防火墙端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=2181/tcp --permanent</span><br></pre></td></tr></table></figure><p>​重启防火墙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p>​查看防火墙开放的端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><h2 id="4-3、配置-myid-文件-（重要）"><a href="#4-3、配置-myid-文件-（重要）" class="headerlink" title="4.3、配置 myid 文件 （重要）"></a>4.3、配置 myid 文件 （重要）</h2><p>​在每台服务器上执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/zookeeper/apache-zookeeper-3.8.4/conf/data</span><br><span class="line">echo &quot;1&quot; &gt; myid</span><br></pre></td></tr></table></figure><p>​<strong>注意， echo “1” 中的数字，这个数字和 zoo.cfg 中配置的 server.x&#x3D;A:B:C 相同，根据各自的 ip 进行配置, 比如  173.16.4.130 配置的数字是1，173.16.4.131 配置的数字是2。</strong></p><h1 id="5、启动zookeeper"><a href="#5、启动zookeeper" class="headerlink" title="5、启动zookeeper"></a>5、启动zookeeper</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">173.16.4.130</span></span><br><span class="line">[root@centos8 conf]# cd /opt/zookeeper/apache-zookeeper-3.8.4/bin/</span><br><span class="line">[root@centos8 bin]# ./zkServer.sh start /opt/zookeeper/apache-zookeeper-3.8.4/conf/zoo.cfg </span><br><span class="line">..启动内容省略...</span><br><span class="line">[root@centos8 bin]# ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/zookeeper/apache-zookeeper-3.8.4/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: follower</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">173.16.4.131</span></span><br><span class="line">[root@centos8 conf]# cd /opt/zookeeper/apache-zookeeper-3.8.4/bin/</span><br><span class="line">[root@centos8 bin]# ./zkServer.sh start /opt/zookeeper/apache-zookeeper-3.8.4/conf/zoo.cfg </span><br><span class="line">..启动内容省略...</span><br><span class="line">[root@centos8 bin]# ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/zookeeper/apache-zookeeper-3.8.4/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2182. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: leader</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">173.16.4.132</span></span><br><span class="line">[root@centos8 conf]# cd /opt/zookeeper/apache-zookeeper-3.8.4/bin/</span><br><span class="line">[root@centos8 bin]# ./zkServer.sh start /opt/zookeeper/apache-zookeeper-3.8.4/conf/zoo.cfg </span><br><span class="line">..启动内容省略...</span><br><span class="line">./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/zookeeper/apache-zookeeper-3.8.4/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2183. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>注释</th></tr></thead><tbody><tr><td>Mode: follower</td><td>跟随者。</td></tr><tr><td>Mode: leader</td><td>领导者。</td></tr></tbody></table><h1 id="6、集群角色"><a href="#6、集群角色" class="headerlink" title="6、集群角色"></a>6、集群角色</h1><p>​Leader：领导者</p><p>​事物请求（写操作）的唯一调度者和处理者，保证集群事务处理的顺序性；集群内部各个服务器的调度者。对于 create、setData、delete 等有写操作的请求，则统一转发给 leader 处理，leader 需要决定编号、执行操作，这个过程称为事物。</p><p>​Follower： 跟随者</p><p>​处理客户端非事物（读操作）请求（可以直接响应），转发事物请求给 Leader ；参与集群 Leader 选举投票。</p><p>​Observer: 观察者</p><p>​对于非事物请求可以独立处理（读操作），对于事物请求会转发给 Leader 处理， Observer 节点接收来自 Leader 的 inform 信息，更新自己本地的缓存，不参与提交和选举投票。通常在不影响集群事务处理能力的前提下提升集群的非事物处理能力。</p><h1 id="7、增加systemd管理zookeeper功能"><a href="#7、增加systemd管理zookeeper功能" class="headerlink" title="7、增加systemd管理zookeeper功能"></a>7、增加systemd管理zookeeper功能</h1><h2 id="7-1、新建-service-文件"><a href="#7-1、新建-service-文件" class="headerlink" title="7.1、新建 service 文件"></a>7.1、新建 service 文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 /]# vim /etc/systemd/system/zookeeper.service</span><br></pre></td></tr></table></figure><p>​在文件中新增以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=zookeeper.service</span><br><span class="line">After=network.target</span><br><span class="line">ConditionPathExists=/opt/zookeeper/apache-zookeeper-3.8.4/conf/zoo.cfg</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">ExecStart=/opt/zookeeper/apache-zookeeper-3.8.4/bin/zkServer.sh start</span><br><span class="line">ExecStop=/opt/zookeeper/apache-zookeeper-3.8.4/bin/zkServer.sh stop</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>​执行以下命令重启守护线程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 /]# systemctl daemon-reload</span><br></pre></td></tr></table></figure><h2 id="7-2、修改-zkEnv-sh-文件"><a href="#7-2、修改-zkEnv-sh-文件" class="headerlink" title="7.2、修改 zkEnv.sh 文件"></a>7.2、修改 zkEnv.sh 文件</h2><p>​直接使用systemctl启动zookeeper会因找不到java的路径报错，我们需要手动修改 zkEnv.sh 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 /]# vim /opt/zookeeper/apache-zookeeper-3.8.4/bin/zkEnv.sh</span><br></pre></td></tr></table></figure><p>​编辑如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加如下一行</span></span><br><span class="line">JAVA_HOME=/usr/lib/jvm/java</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">到此两行上方即可:</span></span><br><span class="line">ZOOBINDIR=&quot;$&#123;ZOOBINDIR:-/usr/bin&#125;&quot;</span><br><span class="line">ZOOKEEPER_PREFIX=&quot;$&#123;ZOOBINDIR&#125;/..&quot;</span><br></pre></td></tr></table></figure><h2 id="7-3、启动和停止"><a href="#7-3、启动和停止" class="headerlink" title="7.3、启动和停止"></a>7.3、启动和停止</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# systemctl start zookeeper</span><br><span class="line">[root@localhost conf]# systemctl stop zookeeper</span><br></pre></td></tr></table></figure><h1 id="8、开机自启"><a href="#8、开机自启" class="headerlink" title="8、开机自启"></a>8、开机自启</h1><p>​执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# systemctl enable zookeeper</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL优化之EXPLAIN命令解析</title>
      <link href="/2024/07/02/MySQL%E4%BC%98%E5%8C%96%E4%B9%8BEXPLAIN%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90/"/>
      <url>/2024/07/02/MySQL%E4%BC%98%E5%8C%96%E4%B9%8BEXPLAIN%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL优化之EXPLAIN命令解析"><a href="#MySQL优化之EXPLAIN命令解析" class="headerlink" title="MySQL优化之EXPLAIN命令解析"></a>MySQL优化之EXPLAIN命令解析</h1><p>​转自：<a href="https://juejin.cn/post/7073761727850119199">https://juejin.cn/post/7073761727850119199</a></p><p>​EXPLAIN：查看SQL语句的执行计划</p><p>​EXPLAIN命令可以帮助我们深入了解MySQL基于开销的优化器，还可以获得很多可能被优化器考虑到的访问策略的细节，以及当运行SQL语句时哪种策略预计会被优化器采用，在优化慢查询时非常有用</p><p>​执行explain之后结果集包含如下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+-------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+-------+</span><br></pre></td></tr></table></figure><p>​下面将对每一个值进行解释</p><span id="more"></span><h1 id="1、id"><a href="#1、id" class="headerlink" title="1、id"></a>1、id</h1><p>​id用来标识整个查询中SELELCT语句的顺序，在嵌套查询中id越大的语句越先执行，该值可能为NULL; id如果相同，从上往下依次执行。id不同，id值越大，执行优先级越高，如果行引用其他行的并集结果，则该值可以为NULL。</p><h1 id="2、select-type"><a href="#2、select-type" class="headerlink" title="2、select_type"></a>2、select_type</h1><p>​select_type表示查询使用的类型，有下面几种：</p><h2 id="2-1、simple"><a href="#2-1、simple" class="headerlink" title="2.1、simple"></a>2.1、simple</h2><p>​简单的select查询，没有union或者子查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from  test where id = 1000;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span><br><span class="line">|  1 | SIMPLE      | test  | NULL       | const | PRIMARY       | PRIMARY | 4       | const |    1 |   100.00 | NULL  |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span><br></pre></td></tr></table></figure><h2 id="2-2、primary"><a href="#2-2、primary" class="headerlink" title="2.2、primary"></a>2.2、primary</h2><p>​最外层的select查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from (select * from test where id = 1000) a;</span><br><span class="line">+----+-------------+------------+--------+---------------+---------+---------+-------+------+-------+</span><br><span class="line">| id | select_type | table      | type   | possible_keys | key     | key_len | ref   | rows | Extra |</span><br><span class="line">+----+-------------+------------+--------+---------------+---------+---------+-------+------+-------+</span><br><span class="line">|  1 | PRIMARY     | &lt;derived2&gt; | system | NULL          | NULL    | NULL    | NULL  |    1 | NULL  |</span><br><span class="line">|  2 | DERIVED     | test       | const  | PRIMARY       | PRIMARY | 8       | const |    1 | NULL  |</span><br><span class="line">+----+-------------+------------+--------+---------------+---------+---------+-------+------+-------+</span><br></pre></td></tr></table></figure><h2 id="2-3、union"><a href="#2-3、union" class="headerlink" title="2.3、union"></a>2.3、union</h2><p>​union中的第二个或随后的select查询，不依赖于外部查询的结果集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test where id = 1000 union all select * from test2 ;</span><br><span class="line">+----+--------------+------------+-------+---------------+---------+---------+-------+-------+-----------------+</span><br><span class="line">| id | select_type  | table      | type  | possible_keys | key     | key_len | ref   | rows  | Extra           |</span><br><span class="line">+----+--------------+------------+-------+---------------+---------+---------+-------+-------+-----------------+</span><br><span class="line">|  1 | PRIMARY      | test       | const | PRIMARY       | PRIMARY | 8       | const |     1 | NULL            |</span><br><span class="line">|  2 | UNION        | test2      | ALL   | NULL          | NULL    | NULL    | NULL  | 67993 | NULL            |</span><br><span class="line">| NULL | UNION RESULT | &lt;union1,2&gt; | ALL   | NULL          | NULL    | NULL    | NULL  |  NULL | Using temporary |</span><br><span class="line">+----+--------------+------------+-------+---------------+---------+---------+-------+-------+-----------------+</span><br></pre></td></tr></table></figure><h2 id="2-4、dependent-union"><a href="#2-4、dependent-union" class="headerlink" title="2.4、dependent union"></a>2.4、dependent union</h2><p>​union中的第二个或随后的select查询，依赖于外部查询的结果集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test where id in (select id  from test where id = 1000 union all select id from test2) ;</span><br><span class="line">+----+--------------------+------------+--------+---------------+---------+---------+-------+-------+-----------------+</span><br><span class="line">| id | select_type        | table      | type   | possible_keys | key     | key_len | ref   | rows  | Extra           |</span><br><span class="line">+----+--------------------+------------+--------+---------------+---------+---------+-------+-------+-----------------+</span><br><span class="line">|  1 | PRIMARY            | test       | ALL    | NULL          | NULL    | NULL    | NULL  | 68505 | Using where     |</span><br><span class="line">|  2 | DEPENDENT SUBQUERY | test       | const  | PRIMARY       | PRIMARY | 8       | const |     1 | Using index     |</span><br><span class="line">|  3 | DEPENDENT UNION    | test2      | eq_ref | PRIMARY       | PRIMARY | 8       | func  |     1 | Using index     |</span><br><span class="line">| NULL | UNION RESULT       | &lt;union2,3&gt; | ALL    | NULL          | NULL    | NULL    | NULL  |  NULL | Using temporary |</span><br><span class="line">+----+--------------------+------------+--------+---------------+---------+---------+-------+-------+-----------------+</span><br></pre></td></tr></table></figure><h2 id="2-5、subquery"><a href="#2-5、subquery" class="headerlink" title="2.5、subquery"></a>2.5、subquery</h2><p>​子查询中的第一个 select 查询，不依赖与外部查询的结果集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test where id = (select id from test where id = 1000);</span><br><span class="line">+----+-------------+-------+-------+---------------+---------+---------+-------+------+-------------+</span><br><span class="line">| id | select_type | table | type  | possible_keys | key     | key_len | ref   | rows | Extra       |</span><br><span class="line">+----+-------------+-------+-------+---------------+---------+---------+-------+------+-------------+</span><br><span class="line">|  1 | PRIMARY     | test  | const | PRIMARY       | PRIMARY | 8       | const |    1 | NULL        |</span><br><span class="line">|  2 | SUBQUERY    | test  | const | PRIMARY       | PRIMARY | 8       | const |    1 | Using index |</span><br><span class="line">+----+-------------+-------+-------+---------------+---------+---------+-------+------+-------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-6、dependent-subquery"><a href="#2-6、dependent-subquery" class="headerlink" title="2.6、dependent subquery"></a>2.6、dependent subquery</h2><p>​子查询中的第一个select查询，依赖于外部查询的结果集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test where id in (select id  from test where id = 1000 union all select id from test2) ;</span><br><span class="line">+----+--------------------+------------+--------+---------------+---------+---------+-------+-------+-----------------+</span><br><span class="line">| id | select_type        | table      | type   | possible_keys | key     | key_len | ref   | rows  | Extra           |</span><br><span class="line">+----+--------------------+------------+--------+---------------+---------+---------+-------+-------+-----------------+</span><br><span class="line">|  1 | PRIMARY            | test       | ALL    | NULL          | NULL    | NULL    | NULL  | 68505 | Using where     |</span><br><span class="line">|  2 | DEPENDENT SUBQUERY | test       | const  | PRIMARY       | PRIMARY | 8       | const |     1 | Using index     |</span><br><span class="line">|  3 | DEPENDENT UNION    | test2      | eq_ref | PRIMARY       | PRIMARY | 8       | func  |     1 | Using index     |</span><br><span class="line">| NULL | UNION RESULT       | &lt;union2,3&gt; | ALL    | NULL          | NULL    | NULL    | NULL  |  NULL | Using temporary |</span><br><span class="line">+----+--------------------+------------+--------+---------------+---------+---------+-------+-------+-----------------+</span><br></pre></td></tr></table></figure><h2 id="2-7、derived"><a href="#2-7、derived" class="headerlink" title="2.7、derived"></a>2.7、derived</h2><p>​用于from子句中有子查询的情况，mysql会递归执行这些子查询，此结果集放在临时表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from (select * from test2 where id = 1000)a;</span><br><span class="line">+----+-------------+------------+--------+---------------+---------+---------+-------+------+-------+</span><br><span class="line">| id | select_type | table      | type   | possible_keys | key     | key_len | ref   | rows | Extra |</span><br><span class="line">+----+-------------+------------+--------+---------------+---------+---------+-------+------+-------+</span><br><span class="line">|  1 | PRIMARY     | &lt;derived2&gt; | system | NULL          | NULL    | NULL    | NULL  |    1 | NULL  |</span><br><span class="line">|  2 | DERIVED     | test2      | const  | PRIMARY       | PRIMARY | 8       | const |    1 | NULL  |</span><br><span class="line">+----+-------------+------------+--------+---------------+---------+---------+-------+------+-------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3、table"><a href="#3、table" class="headerlink" title="3、table"></a>3、table</h1><p>​table用来表示输出行所引用的表名。</p><h1 id="4、type（重要）"><a href="#4、type（重要）" class="headerlink" title="4、type（重要）"></a>4、type（重要）</h1><p>​type表示访问类型，下面一次解释各种类型，类型顺序从最好到最差排列。</p><h2 id="4-1、system"><a href="#4-1、system" class="headerlink" title="4.1、system"></a>4.1、system</h2><p>​表仅有一行，是 cons 类型的一个特例。因为子查询只有一行数据，模拟了单表只有一行数据，此时 type 为 system。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from (select * from test2 where id = 1000)a;</span><br><span class="line">+----+-------------+------------+--------+---------------+---------+---------+-------+------+-------+</span><br><span class="line">| id | select_type | table      | type   | possible_keys | key     | key_len | ref   | rows | Extra |</span><br><span class="line">+----+-------------+------------+--------+---------------+---------+---------+-------+------+-------+</span><br><span class="line">|  1 | PRIMARY     | &lt;derived2&gt; | system | NULL          | NULL    | NULL    | NULL  |    1 | NULL  |</span><br><span class="line">|  2 | DERIVED     | test2      | const  | PRIMARY       | PRIMARY | 8       | const |    1 | NULL  |</span><br><span class="line">+----+-------------+------------+--------+---------------+---------+---------+-------+------+-------+</span><br></pre></td></tr></table></figure><h2 id="4-2、const"><a href="#4-2、const" class="headerlink" title="4.2、const"></a>4.2、const</h2><p>​确定只有一行匹配的时候，mysql 优化器会在查询前读取它并且只读一次，速度非常快。</p><p><img src="/Users/wangrui/Downloads/const.png" alt="const"></p><h2 id="4-3、eq-ref"><a href="#4-3、eq-ref" class="headerlink" title="4.3、eq_ref"></a>4.3、eq_ref</h2><p>​对于每个来自于前表的行组合，从该表中读取一行，常用在一个索引是 unique key 或者 primary key 。</p><p><img src="/Users/wangrui/Downloads/eq_ref.png" alt="eq_ref"></p><h2 id="4-4、ref"><a href="#4-4、ref" class="headerlink" title="4.4、ref"></a>4.4、ref</h2><p>​对于来自前面的表的行组合，所有有匹配索引值的行都从这张表中读取，如果联接只使用键的最左边的前缀，或如果键不是 unique key 或 primary key（换句话说，如果联接不能基于关键字选择单个行的话），则使用 ref。</p><p>​ref 可以用于使用 &#x3D; 或 &lt;&#x3D;&gt; 操作符的带索引的列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test ,test2 where test.bnet_id=test2.aid;</span><br><span class="line">+----+-------------+-------+------+---------------+---------+---------+-------------------+-------+-----------------------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key     | key_len | ref               | rows  | Extra                 |</span><br><span class="line">+----+-------------+-------+------+---------------+---------+---------+-------------------+-------+-----------------------+</span><br><span class="line">|  1 | SIMPLE      | test  | ALL  | NULL          | NULL    | NULL    | NULL              | 68505 | Using where           |</span><br><span class="line">|  1 | SIMPLE      | test2 | ref  | idx_aid       | idx_aid | 5       | test.test.bnet_id | 34266 | Using index condition |</span><br><span class="line">+----+-------------+-------+------+---------------+---------+---------+-------------------+-------+-----------------------+</span><br></pre></td></tr></table></figure><p>test表<code>bnet_id</code>不是索引，test2表<code>aid</code>为索引列。</p><h2 id="4-5、ref-or-null"><a href="#4-5、ref-or-null" class="headerlink" title="4.5、ref_or_null"></a>4.5、ref_or_null</h2><p>​类似 ref, 但是添加了可以专门搜索 null 值的行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test where bnet_id=1 or bnet_id is null;</span><br><span class="line">+----+-------------+-------+-------------+---------------+----------+---------+-------+------+-----------------------+</span><br><span class="line">| id | select_type | table | type        | possible_keys | key      | key_len | ref   | rows | Extra                 |</span><br><span class="line">+----+-------------+-------+-------------+---------------+----------+---------+-------+------+-----------------------+</span><br><span class="line">|  1 | SIMPLE      | test  | ref_or_null | idx_bnet      | idx_bnet | 9       | const |    2 | Using index condition |</span><br><span class="line">+----+-------------+-------+-------------+---------------+----------+---------+-------+------+-----------------------+</span><br></pre></td></tr></table></figure><p>前提为<code>bnet_id</code>列为索引，且<code>bnet_id</code>列有null值</p><h2 id="4-6、index-merge"><a href="#4-6、index-merge" class="headerlink" title="4.6、index_merge"></a>4.6、index_merge</h2><p>​该访问类型使用了索引合并优化方法，key 列包含了使用的索引的清单，key_len 包含了使用的索引的最长的关键元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test where id  = 1 or bnet_id = 1;</span><br><span class="line">+----+-------------+-------+-------------+------------------+------------------+---------+------+------+--------------------------------------------+</span><br><span class="line">| id | select_type | table | type        | possible_keys    | key              | key_len | ref  | rows | Extra                                      |</span><br><span class="line">+----+-------------+-------+-------------+------------------+------------------+---------+------+------+--------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | test  | index_merge | PRIMARY,idx_bnet | PRIMARY,idx_bnet | 8,9     | NULL |    2 | Using union(PRIMARY,idx_bnet); Using where |</span><br><span class="line">+----+-------------+-------+-------------+------------------+------------------+---------+------+------+--------------------------------------------+</span><br></pre></td></tr></table></figure><p>​前提条件为<code>id</code>列和<code>bnet_id</code>列都有单列索引。如果出现index_merge，并且这类SQL后期使用较频繁，可以考虑把单列索引换为组合索引，这样效率更高</p><h2 id="4-7、range"><a href="#4-7、range" class="headerlink" title="4.7、range"></a>4.7、range</h2><p>​只检索给定范围的行，使用一个索引来选择行。 key 列显示使用了那个索引。key_len 包含所使用索引的最长关键字元素。该类型中ref 列为 NULL。</p><p>当使用&#x3D;、&lt;&gt;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;、IS NULL、&lt;&#x3D;&gt;、BETWEEN或者IN操作符，用常量比较关键字列时，可以使用range。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test where bnet_id &gt; 1000 and  bnet_id &lt; 10000;</span><br><span class="line">+----+-------------+-------+-------+---------------+----------+---------+------+------+-----------------------+</span><br><span class="line">| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows | Extra                 |</span><br><span class="line">+----+-------------+-------+-------+---------------+----------+---------+------+------+-----------------------+</span><br><span class="line">|  1 | SIMPLE      | test  | range | idx_bnet      | idx_bnet | 9       | NULL |    1 | Using index condition |</span><br><span class="line">+----+-------------+-------+-------+---------------+----------+---------+------+------+-----------------------+</span><br></pre></td></tr></table></figure><p>前提条件为<code>bnet_id</code>列有索引。</p><h2 id="4-8、index"><a href="#4-8、index" class="headerlink" title="4.8、index"></a>4.8、index</h2><p>​在进行统计时非常常见，此联接类型实际上会扫描索引树</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select count(*) from test;</span><br><span class="line">+----+-------------+-------+-------+---------------+----------+---------+------+-------+-------------+</span><br><span class="line">| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra       |</span><br><span class="line">+----+-------------+-------+-------+---------------+----------+---------+------+-------+-------------+</span><br><span class="line">|  1 | SIMPLE      | test  | index | NULL          | idx_bnet | 9       | NULL | 68505 | Using index |</span><br><span class="line">+----+-------------+-------+-------+---------------+----------+---------+------+-------+-------------+</span><br></pre></td></tr></table></figure><h2 id="4-9、all"><a href="#4-9、all" class="headerlink" title="4.9、all"></a>4.9、all</h2><p>​对于每个来自于先前的表的行组合，进行完整的表扫描，通常可以增加更多的索引而不要使用ALL，使得行能基于前面的表中的常数值或列值被检索出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select *  from test where create_time = &#x27;0000-00-00 00:00:00&#x27;;</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+-------+-------------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows  | Extra       |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+-------+-------------+</span><br><span class="line">|  1 | SIMPLE      | test  | ALL  | NULL          | NULL | NULL    | NULL | 68505 | Using where |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+-------+-------------+</span><br></pre></td></tr></table></figure><h1 id="5、possible-keys"><a href="#5、possible-keys" class="headerlink" title="5、possible_keys"></a>5、possible_keys</h1><p>​possible_keys 是指在这个 SQL 中，mysql 可以使用这个索引去辅助查找记录，当查询涉及到的字段，都会被列出，但不一定被查询使用.若为空则表示没有可以使用的索引，此时可以通过检查 where 语句看是否可以引用某些列或者新建索引来提高性能。</p><h1 id="6、key-重要"><a href="#6、key-重要" class="headerlink" title="6、key(重要)"></a>6、key(重要)</h1><p>​key 列显示的是当前表实际使用的索引，如果没有选择索引，则此列为 null，要想强制 MySQL 使用或忽视 possible_keys 列中的索引，在查询中使用 FORCE INDEX、USE INDEX 或者 IGNORE INDEX。</p><h1 id="7、key-len"><a href="#7、key-len" class="headerlink" title="7、key_len"></a>7、key_len</h1><p>​key_len 列显示 MySQL 决定使用的键长度。如果 KEY 键是 NULL，则长度为 NULL。在不损失精确性的情况下，长度越短越好key len 的长度还和字符集有关, latin1一个字符占用1个字节, gbk 一个字符占用2个字节, utf8 一个字符占用3个字节。key_len 的计算法方法如下：</p><table><thead><tr><th>列类型</th><th>长度</th><th>备注</th></tr></thead><tbody><tr><td>id int</td><td>4+1</td><td>int为4bytes,允许为NULL,加1byte</td></tr><tr><td>id bigint not null</td><td>8</td><td>bigint为8bytes</td></tr><tr><td>user char(30) utf8</td><td>30*3+1</td><td>utf8每个字符为3bytes,允许为NULL,加1byte</td></tr><tr><td>user varchar(30) not null utf8</td><td>30*3+2</td><td>utf8每个字符为3bytes,变长数据类型,加2bytes</td></tr><tr><td>user varchar(30) utf8</td><td>30*3+2+1</td><td>utf8每个字符为3bytes,允许为NULL,加1byte,变长数据类型,加2bytes</td></tr><tr><td>detail text(10) utf8</td><td>30*3+2+1</td><td>TEXT截取部分,被视为动态列类型。</td></tr></tbody></table><p>​key_len只指示了where中用于条件过滤时被选中的索引列，是不包含<code>order by</code>或<code>group by</code>这一部分被选中的索引列。</p><h1 id="8、ref"><a href="#8、ref" class="headerlink" title="8、ref"></a>8、ref</h1><p>​ref列用来显示使用哪个列或常数与key一起从表中选择相应的行。它显示的列的名字（或const），此列多数时候为null。</p><h1 id="9、rows"><a href="#9、rows" class="headerlink" title="9、rows"></a>9、rows</h1><p>​rows列显示的是mysql解析器认为执行此SQL时必须扫描的行数。此数值为一个预估值，不是具体值，通常比实际值小。</p><h1 id="10、filtered"><a href="#10、filtered" class="headerlink" title="10、filtered"></a>10、filtered</h1><p>​此参数为mysql 5.7 新加参数，指的是返回结果的行数所占需要读到的行（rows的值）的比例，对于使用join时，前一个表的结果集大小直接影响了循环的行数。</p><h1 id="11、extra-重要"><a href="#11、extra-重要" class="headerlink" title="11、extra(重要)"></a>11、extra(重要)</h1><p>​extra表示不在其他列并且也很重要的额外信息。</p><h2 id="11-1、using-index"><a href="#11-1、using-index" class="headerlink" title="11.1、using index"></a>11.1、using index</h2><p>​该值表示这个SQL语句使用了覆盖索引（覆盖索引是指可以直接在索引列中得到想要的结果，而不用去回表），此时效率最高。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select id from test;</span><br><span class="line">+----+-------------+-------+-------+---------------+----------+---------+------+-------+-------------+</span><br><span class="line">| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra       |</span><br><span class="line">+----+-------------+-------+-------+---------------+----------+---------+------+-------+-------------+</span><br><span class="line">|  1 | SIMPLE      | test  | index | NULL          | idx_bnet | 9       | NULL | 68505 | Using index |</span><br><span class="line">+----+-------------+-------+-------+---------------+----------+---------+------+-------+-------------+</span><br></pre></td></tr></table></figure><p>​这个例子中<code>id</code>字段为主键，但是key那里显示走的并不是主键索引，这个是因为mysql的所有二级索引中都会包含所有的主键信息，而mysql没有单独的存储主键索引，所以扫描二级索引的开销比全表扫描更快</p><h2 id="11-2、using-where"><a href="#11-2、using-where" class="headerlink" title="11.2、using where"></a>11.2、using where</h2><p>​表示存储引擎搜到记录后进行了后过滤(POST-FILTER)，如果查询未能使用索引，using where的作用只是提醒我们mysql要用where条件过滤结果集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test where id &gt; 1;</span><br><span class="line">+----+-------------+-------+-------+---------------+---------+---------+------+-------+-------------+</span><br><span class="line">| id | select_type | table | type  | possible_keys | key     | key_len | ref  | rows  | Extra       |</span><br><span class="line">+----+-------------+-------+-------+---------------+---------+---------+------+-------+-------------+</span><br><span class="line">|  1 | SIMPLE      | test  | range | PRIMARY       | PRIMARY | 8       | NULL | 34252 | Using where |</span><br><span class="line">+----+-------------+-------+-------+---------------+---------+---------+------+-------+-------------+</span><br></pre></td></tr></table></figure><h2 id="11-3、using-temporary"><a href="#11-3、using-temporary" class="headerlink" title="11.3、using temporary"></a>11.3、using temporary</h2><p>​表示mysql需要使用临时表来存储结果集，常见于排序和分组查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test where id in (1,2) group by bnet_id;</span><br><span class="line">+----+-------------+-------+-------+-----------------------------------------+---------+---------+------+------+----------------------------------------------+</span><br><span class="line">| id | select_type | table | type  | possible_keys                           | key     | key_len | ref  | rows | Extra                                        |</span><br><span class="line">+----+-------------+-------+-------+-----------------------------------------+---------+---------+------+------+----------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | test  | range | PRIMARY,IDX(event_key-bnet_Id),idx_bnet | PRIMARY | 8       | NULL |    2 | Using where; Using temporary; Using filesort |</span><br><span class="line">+----+-------------+-------+-------+-----------------------------------------+---------+---------+------+------+----------------------------------------------+</span><br></pre></td></tr></table></figure><h2 id="11-4、using-filesort"><a href="#11-4、using-filesort" class="headerlink" title="11.4、using filesort"></a>11.4、using filesort</h2><p>​是指mysql无法利用索引直接完成排序（排序的字段不是索引字段），此时会用到缓冲空间来进行排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test order by bnet_id;</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+-------+----------------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows  | Extra          |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+-------+----------------+</span><br><span class="line">|  1 | SIMPLE      | test  | ALL  | NULL          | NULL | NULL    | NULL | 68505 | Using filesort |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+-------+----------------+</span><br></pre></td></tr></table></figure><h2 id="11-5、using-join-buffer"><a href="#11-5、using-join-buffer" class="headerlink" title="11.5、using join buffer"></a>11.5、using join buffer</h2><p>​强调在获取连接条件时没有用到索引，并且需要连接缓冲区来存储中间结果。（性能可以通过添加索引或者修改连接字段改进）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test left join test2 on test.create_time = test2.create_time;</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra                                              |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | test  | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 959692 |   100.00 | NULL                                               |</span><br><span class="line">|  1 | SIMPLE      | test2 | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 958353 |   100.00 | Using where; Using join buffer (Block Nested Loop) |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+--------+----------+----------------------------------------------------+</span><br><span class="line">2 rows in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>​Block Nested Loop 是指 Block Nested-Loop Join算法：将外层循环的行&#x2F;结果集存入 join buffer, 内层循环的每一行与整个buffer中的记录做比较，从而减少内层循环的次数。</p><h2 id="11-6、impossible-where"><a href="#11-6、impossible-where" class="headerlink" title="11.6、impossible where"></a>11.6、impossible where</h2><p>​表示where条件导致没有返回的行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from test where id is null;</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+------------------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra            |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+------------------+</span><br><span class="line">|  1 | SIMPLE      | NULL  | NULL | NULL          | NULL | NULL    | NULL | NULL | Impossible WHERE |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+------------------+</span><br></pre></td></tr></table></figure><h2 id="11-7、using-index-condition"><a href="#11-7、using-index-condition" class="headerlink" title="11.7、using index condition"></a>11.7、using index condition</h2><p>​是mysql 5.6 之后新加的特性，结合mysql的ICP（Index Condition Pushdown）特性使用。主要是优化了可以在索引（仅限二级索引）上进行 like 查找</p><p>如果extra中出现多个上面结果，则表示顺序使用上面的方法进行解析查询。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql8配置用户权限</title>
      <link href="/2024/06/04/mysql8%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/"/>
      <url>/2024/06/04/mysql8%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="1、登录mysql"><a href="#1、登录mysql" class="headerlink" title="1、登录mysql"></a>1、登录mysql</h1><p>由于我的 mysql8 是由 docker 启动，先通过 docker 命令进入mysql 容器，再使用 mysql 命令登录 mysql。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql8[容器名称] bash</span><br><span class="line">bash-4.4# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 8</span><br><span class="line">Server version: 8.0.36 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2024, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换数据库实例</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">use mysql;</span></span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="2、用户操作"><a href="#2、用户操作" class="headerlink" title="2、用户操作"></a>2、用户操作</h1><h2 id="2-1、查看用户"><a href="#2-1、查看用户" class="headerlink" title="2.1、查看用户"></a>2.1、查看用户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select host, user, authentication_string , plugin from user;</span><br></pre></td></tr></table></figure><h2 id="2-2、创建本地用户"><a href="#2-2、创建本地用户" class="headerlink" title="2.2、创建本地用户"></a>2.2、创建本地用户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个用户名为admin，密码为 admin123456 的本地用户。</span><br><span class="line">create user &#x27;admin&#x27;@&#x27;localhost&#x27; identified by &#x27;admin123456&#x27;;</span><br><span class="line"># 使admin用户获得所有权限</span><br><span class="line">grant all privileges on *.* to &#x27;admin&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"># 刷新授权才会生效</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"># wzd_mianxi数据库创建用户wzd,并赋予权限</span><br><span class="line">create user &#x27;wzd&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line"># 注意，数据库名不能设计成wzd-mianxi，否则授权会报错</span><br><span class="line">grant all privileges on wzd_mianxi.* to &#x27;wzd&#x27;@&#x27;%&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="2-3、创建外网可访问的用户"><a href="#2-3、创建外网可访问的用户" class="headerlink" title="2.3、创建外网可访问的用户"></a>2.3、创建外网可访问的用户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个用户名为admin，密码为 admin123456 的本地用户</span><br><span class="line">create user &#x27;admin&#x27;@&#x27;%&#x27; identified by &#x27;admin123456&#x27;;</span><br><span class="line"># 使admin用户获得所有权限</span><br><span class="line">grant all privileges on *.* to &#x27;admin&#x27;@&#x27;%&#x27;;</span><br><span class="line"># 刷新授权才会生效</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="2-4、修改用户"><a href="#2-4、修改用户" class="headerlink" title="2.4、修改用户"></a>2.4、修改用户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询用户信息</span><br><span class="line">select * from user Where User=&#x27;admin&#x27; and Host=&#x27;localhost&#x27;;</span><br><span class="line"># 方式一：将用户名 admin 更新为 admin_newm</span><br><span class="line">rename user &#x27;admin&#x27;@&#x27;localhost&#x27; to &#x27;admin_new&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"># 方式二：将用户名 admin 更新为 admin_newm</span><br><span class="line">update user set User=&#x27;admin_new&#x27; where User=&#x27;admin&#x27; and Host=&#x27;localhost&#x27;;</span><br><span class="line"># 刷新授权才会生效</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="2-5、删除用户"><a href="#2-5、删除用户" class="headerlink" title="2.5、删除用户"></a>2.5、删除用户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 方式一：删除指定用户</span><br><span class="line">drop user &#x27;admin&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"># 方式二：删除指定用户</span><br><span class="line">delete from user Where User=&#x27;admin&#x27; and Host=&#x27;localhost&#x27;;</span><br><span class="line"># 刷新授权才会生效</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h1 id="3、操作用户权限"><a href="#3、操作用户权限" class="headerlink" title="3、操作用户权限"></a>3、操作用户权限</h1><h3 id="3-1、查看用户权限"><a href="#3-1、查看用户权限" class="headerlink" title="3.1、查看用户权限"></a>3.1、查看用户权限</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show grants for &#x27;admin&#x27;@&#x27;localhost&#x27;; </span><br></pre></td></tr></table></figure><h2 id="3-2、修改用户权限"><a href="#3-2、修改用户权限" class="headerlink" title="3.2、修改用户权限"></a>3.2、修改用户权限</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 使admin用户获得所有权限。</span><br><span class="line">grant all privileges on *.* to &#x27;admin&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"># 使admin用户获得所有数据库中所有表的(*.*)select、insert、update、delete权限</span><br><span class="line">grant select,insert,update,delete on *.* to &#x27;admin&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"># 如果只想让该用户访问某一个数据库写成：testdb.* 即可</span><br><span class="line">grant all privileges on testdb.* to &#x27;admin&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"># 刷新授权才会生效</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="3-3、删除用户权限"><a href="#3-3、删除用户权限" class="headerlink" title="3.3、删除用户权限"></a>3.3、删除用户权限</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 删除amdin用户在本地访问mysql时的所有权限</span><br><span class="line">revoke all privileges on *.* from &#x27;admin&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"># 删除amdin用户在本地访问mysql时的insert和update权限</span><br><span class="line">revoke insert,update on testdb.* from &#x27;admin&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"># 刷新授权才会生效</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h1 id="4、修改密码"><a href="#4、修改密码" class="headerlink" title="4、修改密码"></a>4、修改密码</h1>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
